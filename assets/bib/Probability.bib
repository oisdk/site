
@inproceedings{ramsey_stochastic_2002,
  title = {Stochastic {{Lambda Calculus}} and {{Monads}} of {{Probability Distributions}}},
  volume = {37},
  booktitle = {29th {{ACM SIGPLAN}}-{{SIGACT}} Symposium on {{Principles}} of Programming Languages},
  publisher = {{ACM}},
  author = {Ramsey, Norman and Pfeffer, Avi},
  year = {2002},
  pages = {154--165},
  file = {/Users/doisinkidney/Zotero/storage/5MFN47A4/Ramsey and Pfeffer - Stochastic Lambda Calculus and Monads of Probabili.pdf;/Users/doisinkidney/Zotero/storage/6QFNDPDU/pmonad.pdf}
}

@misc{_probability_2009,
  title = {Probability Monad},
  abstract = {My favourite programming language Haskell has a nice library for doing calculations with probablility distributions, called probability. The library was originally written by Martin Ewig and Steve \ldots{}},
  journal = {Formalized Mathematics},
  month = may,
  year = {2009},
  file = {/Users/doisinkidney/Zotero/storage/IRI62MGV/probability-monad.html}
}

@article{erwig_functional_2006,
  title = {Functional Pearls: {{Probabilistic}} Functional Programming in {{Haskell}}},
  volume = {16},
  issn = {1469-7653, 0956-7968},
  shorttitle = {Functional Pearls},
  abstract = {At the heart of functional programming rests the principle of referential transparency, which in particular means that a function f applied to a value x always yields one and the same value y = f(x). This principle seems to be violated when contemplating the use of functions to describe probabilistic events, such as rolling a},
  number = {1},
  journal = {Journal of Functional Programming},
  doi = {10.1017/S0956796805005721},
  author = {Erwig, Martin and Kollmansberger, Steve},
  year = {2006},
  pages = {21--34},
  file = {/Users/doisinkidney/Zotero/storage/EQNUDQV6/PFP_JFP06.pdf}
}

@book{getoor_introduction_2007,
  address = {Cambridge, Mass},
  series = {Adaptive Computation and Machine Learning},
  title = {Introduction to {{Statistical Relational Learning}}},
  isbn = {978-0-262-07288-5},
  lccn = {QA76.9.D3 I68 2007},
  language = {en},
  publisher = {{MIT Press}},
  editor = {Getoor, Lise and Taskar, Ben},
  year = {2007},
  keywords = {Computer algorithms,MACHINE LEARNING,Relational databases,Statistical methods},
  note = {OCLC: ocm80019804}
}

@inproceedings{kiselyov_embedded_2009,
  title = {Embedded Probabilistic Programming},
  booktitle = {Domain-{{Specific Languages}}},
  publisher = {{Springer}},
  author = {Kiselyov, Oleg and Shan, Chung-Chieh},
  year = {2009},
  pages = {360--384},
  file = {/Users/doisinkidney/Zotero/storage/RAAKX9NM/dsl-paper.pdf}
}

@article{milch_blog_2007,
  title = {Blog : {{Probabilistic}} Models with Unknown Objects},
  shorttitle = {Blog},
  abstract = {This paper introduces and illustrates BLOG, a formal language for defining probability models over worlds with unknown objects and identity uncertainty. BLOG unifies and extends several existing approaches. Subject to certain acyclicity constraints, every BLOG model specifies a unique probability distribution over first-order model structures that can contain varying and unbounded numbers of objects. Furthermore, complete inference algorithms exist for a large fragment of the language. We also introduce a probabilistic form of Skolemization for handling evidence. 1},
  author = {Milch, Brian and Marthi, Bhaskara and Russell, Stuart and Sontag, David and Ong, Daniel L. and Kolobov, Andrey},
  year = {2007},
  file = {/Users/doisinkidney/Zotero/storage/DU7QBKSH/Milch et al. - 2005 - Blog Probabilistic models with unknown objects.pdf;/Users/doisinkidney/Zotero/storage/R5W9ZSQH/ijcai05-blog.pdf;/Users/doisinkidney/Zotero/storage/GQ5WS2QJ/summary.html}
}

@inproceedings{erwig_modeling_2006,
  title = {Modeling {{Genome Evolution}} with a {{DSEL}} for {{Probabilistic Programming}}},
  booktitle = {International {{Symposium}} on {{Practical Aspects}} of {{Declarative Languages}}},
  publisher = {{Springer}},
  author = {Erwig, Martin and Kollmansberger, Steve},
  year = {2006},
  file = {/Users/doisinkidney/Zotero/storage/ZUSAE833/Erwig and Kollmansberger - Modeling Genome Evolution with a DSEL for Probabil.pdf}
}

@incollection{dechter_bucket_1998,
  title = {Bucket Elimination: {{A}} Unifying Framework for Probabilistic Inference},
  booktitle = {Learning in Graphical Models},
  publisher = {{Springer}},
  author = {Dechter, Rina},
  year = {1998},
  pages = {75--104},
  file = {/Users/doisinkidney/Zotero/storage/A5S6P93S/R48a.pdf}
}

@book{goodman_design_2014,
  title = {The {{Design}} and {{Implementation}} of {{Probabilistic Programming Languages}}},
  abstract = {Probabilistic programming languages (PPLs) unify techniques for the formal description of computation and for the representation and use of uncertain knowledge. PPLs have seen recent interest from the artificial intelligence, programming languages, cognitive science, and natural languages communities. This book explains how to implement PPLs by lightweight embedding into a host language. We illustrate this by designing and implementing WebPPL, a small PPL embedded in Javascript. We show how to implement several algorithms for universal probabilistic inference, including priority-based enumeration with caching, particle filtering, and Markov chain Monte Carlo. We use program transformations to expose the information required by these algorithms, including continuations and stack addresses. We illustrate these ideas with examples drawn from semantic parsing, natural language pragmatics, and procedural graphics.},
  author = {Goodman, Noah D and Stuhlm\"uller, Andreas},
  year = {2014}
}

@inproceedings{mogensen_troll_2009,
  title = {Troll, a {{Language}} for {{Specifying Dice}}-{{Rolls}}},
  booktitle = {Proceedings of the 2009 {{Acm Symposium}} on {{Applied Computing}}},
  publisher = {{Association for Computing Machinery}},
  author = {Mogensen, Torben \AE{}gidius},
  year = {2009},
  file = {/Users/doisinkidney/Zotero/storage/RA4ARS42/Mogensen - 2009 - Troll, a Language for Specifying Dice-Rolls.pdf}
}

@article{kimmig_implementation_2011,
  title = {On the Implementation of the Probabilistic Logic Programming Language {{ProbLog}}},
  volume = {11},
  issn = {1475-3081, 1471-0684},
  abstract = {The past few years have seen a surge of interest in the field of probabilistic logic learning and statistical relational learning. In this endeavor, many probabilistic logics have been developed. ProbLog is a recent probabilistic extension of Prolog motivated by the mining of large biological networks. In ProbLog, facts can be labeled with probabilities. These facts are treated as mutually independent random variables that indicate whether these facts belong to a randomly sampled program. Different kinds of queries can be posed to ProbLog programs. We introduce algorithms that allow the efficient execution of these queries, discuss their implementation on top of the YAP-Prolog system, and evaluate their performance in the context of large networks of biological entities.},
  number = {2-3},
  journal = {Theory and Practice of Logic Programming},
  doi = {10.1017/S1471068410000566},
  author = {Kimmig, Angelika and Demoen, Bart and Raedt, Luc De and Costa, V\'itor Santos and Rocha, Ricardo},
  month = mar,
  year = {2011},
  keywords = {Exact and approximative inference,Implementation,Probabilistic logic programming},
  pages = {235-262},
  file = {/Users/doisinkidney/Zotero/storage/6R4F4HUV/kimmig10.pdf;/Users/doisinkidney/Zotero/storage/W6UI2WPV/21037609B99F5DC8033DDF56D07BF839.html}
}

@unpublished{larsen_memory_2011,
  title = {Memory {{Efficient Implementation}} of {{Probability Monads}}},
  author = {Larsen, Ken Friis},
  month = aug,
  year = {2011},
  file = {/Users/doisinkidney/Zotero/storage/EV8MW88P/Larsen - Memory efficient implementation of probability mon.pdf}
}

@article{jacobs_categorical_2016,
  title = {A {{Categorical Basis}} for {{Conditional Probability}}},
  author = {Jacobs, Bart},
  year = {2016},
  keywords = {Category Theory,Probability},
  file = {/Users/doisinkidney/Zotero/storage/M3AHBKUJ/Jacobs - 2016 - A Categorical Basis for Conditional Probability.pdf}
}

@incollection{domingos_markov_2007,
  address = {Cambridge, Mass},
  title = {Markov {{Logic}}: {{A Unifying Framework}} for {{Statistical Relational Learning}}},
  isbn = {978-0-262-07288-5},
  booktitle = {Statistical {{Relational Learning}}},
  publisher = {{MIT Press}},
  author = {Domingos, Pedro and Richardson, Matthew},
  editor = {Getoor, Lise and Taskar, Ben},
  year = {2007},
  pages = {339}
}

@unpublished{kidd_build_2007,
  title = {Build Your Own Probability Monads},
  author = {Kidd, Eric},
  month = feb,
  year = {2007},
  file = {/Users/doisinkidney/Zotero/storage/UGIJ3GZ9/Kidd - Build your own probability monads.pdf}
}

@inproceedings{pfeffer_ibal_2001,
  title = {{{IBAL}} : {{A}} Probabilistic Rational Programming Language},
  booktitle = {{{IJCAI}}},
  publisher = {{Citeseer}},
  author = {Pfeffer, Avi},
  year = {2001},
  pages = {733--740},
  file = {/Users/doisinkidney/Zotero/storage/ZE47DRW8/ibal.ijcai01.ps}
}

@misc{dominus_short_2010,
  title = {A Short Bibliography of Probability Monads},
  shorttitle = {The {{Universe}} of {{Discourse}}},
  journal = {The Universe of Discourse},
  author = {Dominus, Mark},
  month = jan,
  year = {2010},
  file = {/Users/doisinkidney/Zotero/storage/RVIRV675/probmonad-refs.html}
}

@article{borgstrom_lambda-calculus_2015,
  title = {A {{Lambda}}-{{Calculus Foundation}} for {{Universal Probabilistic Programming}}},
  journal = {arXiv preprint arXiv:1512.08990},
  author = {Borgstr\"om, Johannes and Lago, Ugo Dal and Gordon, Andrew D and Szymczak, Marcin},
  year = {2015},
  keywords = {Lambda Calculus,Probability},
  file = {/Users/doisinkidney/Zotero/storage/SC49EKF2/1512.08990.pdf}
}

@article{domingos_markov_2009,
  series = {Synthesis {{Lectures}} on {{Artificial Intelligence}} and {{Machine Learning}}},
  title = {Markov {{Logic}}: {{An Interface Layer}} for {{Artificial Intelligence}}},
  volume = {3},
  issn = {1939-4608, 1939-4616},
  shorttitle = {Markov {{Logic}}},
  abstract = {Most subfields of computer science have an interface layer via which applications communicate with the infrastructure, and this is key to their success (e.g., the Internet in networking, the relational model in databases, etc.). So far this interface layer has been missing in AI. First-order logic and probabilistic graphical models each have some of the necessary features, but a viable interface layer requires combining both. Markov logic is a powerful new language that accomplishes this by attaching weights to first-order formulas and treating them as templates for features of Markov random fields. Most statistical models in wide use are special cases of Markov logic, and first-order logic is its infinite-weight limit. Inference algorithms for Markov logic combine ideas from satisfiability, Markov chain Monte Carlo, belief propagation, and resolution. Learning algorithms make use of conditional likelihood, convex optimization, and inductive logic programming. Markov logic has been successfully applied to problems in information extraction and integration, natural language processing, robot mapping, social networks, computational biology, and others, and is the basis of the open-source Alchemy system.},
  language = {en},
  number = {1},
  journal = {Synthesis Lectures on Artificial Intelligence and Machine Learning},
  doi = {10.2200/S00206ED1V01Y200907AIM007},
  author = {Domingos, Pedro and Lowd, Daniel},
  year = {2009},
  pages = {1-155}
}

@misc{dominus_monad_2009,
  title = {A Monad for Probability and Provenance},
  shorttitle = {The {{Universe}} of {{Discourse}}},
  journal = {The Universe of Discourse},
  author = {Dominus, Mark},
  month = dec,
  year = {2009},
  keywords = {Haskell,Probability},
  file = {/Users/doisinkidney/Zotero/storage/AWNNNGV4/probmonad.html}
}

@inproceedings{reed_distance_2010,
  title = {Distance Makes the Types Grow Stronger: A Calculus for Differential Privacy},
  volume = {45},
  shorttitle = {Distance Makes the Types Grow Stronger},
  booktitle = {{{ACM Sigplan Notices}}},
  publisher = {{ACM}},
  author = {Reed, Jason and Pierce, Benjamin C.},
  year = {2010},
  pages = {157--168},
  file = {/Users/doisinkidney/Zotero/storage/FU78V8H8/Reed and Pierce - 2010 - Distance makes the types grow stronger a calculus.pdf;/Users/doisinkidney/Zotero/storage/M66WU4PF/citation.html}
}

@article{mcsherry_privacy_2010,
  title = {Privacy {{Integrated Queries}}},
  abstract = {Privacy Integrated Queries (PINQ) is an extensible data analysis platform designed to provide unconditional privacy guarantees for the records of the underlying data sets. PINQ provides analysts with access to records through an SQL-like declarative language (LINQ) amidst otherwise arbitrary C\# code. At the same time, the design of PINQ's analysis language and its careful implementation provide formal guarantees of differential privacy for any and all uses of the platform. PINQ's guarantees require no trust placed in the expertise or diligence of the analysts, broadening the scope for design and deployment of privacy-preserving data analyses, especially by privacy nonexperts.},
  journal = {Communications of the ACM},
  author = {McSherry, Frank},
  month = sep,
  year = {2010},
  file = {/Users/doisinkidney/Zotero/storage/MN86NA3N/pinq-CACM.pdf}
}

@article{avery_codensity_2014,
  archivePrefix = {arXiv},
  eprinttype = {arxiv},
  eprint = {1410.4432},
  primaryClass = {math},
  title = {Codensity and the {{Giry}} Monad},
  abstract = {The Giry monad on the category of measurable spaces sends a space to a space of all probability measures on it. There is also a finitely additive Giry monad in which probability measures are replaced by finitely additive probability measures. We give a characterisation of both finitely and countably additive probability measures in terms of integration operators that is a correction and extension of a result claimed by Sturtz. A counterexample to Sturtz's claim is given in the appendix. This correspondence gives a new description of the Giry monads, which is then used to show that the Giry monads arise as the codensity monads of forgetful functors from certain categories of convex sets and affine maps to the category of measurable spaces.},
  journal = {arXiv:1410.4432 [math]},
  author = {Avery, Tom},
  month = oct,
  year = {2014},
  keywords = {Mathematics - Category Theory},
  file = {/Users/doisinkidney/Zotero/storage/7T68E933/Avery - 2014 - Codensity and the Giry monad.pdf;/Users/doisinkidney/Zotero/storage/Z3S5FB3V/1410.html}
}

@incollection{dold_categorical_1982,
  address = {Berlin, Heidelberg},
  title = {A Categorical Approach to Probability Theory},
  volume = {915},
  isbn = {978-3-540-11211-2 978-3-540-39041-1},
  booktitle = {Categorical {{Aspects}} of {{Topology}} and {{Analysis}}},
  publisher = {{Springer Berlin Heidelberg}},
  author = {Giry, Mich\`ele},
  editor = {Dold, A. and Eckmann, B. and Banaschewski, B.},
  year = {1982},
  keywords = {Category Theory,Probability},
  pages = {68-85},
  file = {/Users/doisinkidney/Zotero/storage/N7WJCNMA/giry1982.pdf},
  doi = {10.1007/BFb0092872}
}

@inproceedings{scibior_practical_2015,
  address = {New York, NY, USA},
  series = {Haskell '15},
  title = {Practical {{Probabilistic Programming}} with {{Monads}}},
  volume = {50},
  isbn = {978-1-4503-3808-0},
  abstract = {The machine learning community has recently shown a lot of interest in practical probabilistic programming systems that target the problem of Bayesian inference. Such systems come in different forms, but they all express probabilistic models as computational processes using syntax resembling programming languages. In the functional programming community monads are known to offer a convenient and elegant abstraction for programming with probability distributions, but their use is often limited to very simple inference problems. We show that it is possible to use the monad abstraction to construct probabilistic models for machine learning, while still offering good performance of inference in challenging models. We use a GADT as an underlying representation of a probability distribution and apply Sequential Monte Carlo-based methods to achieve efficient inference. We define a formal semantics via measure theory. We demonstrate a clean and elegant implementation that achieves performance comparable with Anglican, a state-of-the-art probabilistic programming system.},
  booktitle = {Proceedings of the 2015 {{ACM SIGPLAN Symposium}} on {{Haskell}}},
  publisher = {{ACM}},
  doi = {10.1145/2804302.2804317},
  author = {\'Scibior, Adam and Ghahramani, Zoubin and Gordon, Andrew D.},
  year = {2015},
  keywords = {HASKELL,Bayesian statistics,Monte Carlo,probabilistic programming,monads},
  pages = {165--176},
  file = {/Users/doisinkidney/Zotero/storage/ATQ694MM/Ścibior et al. - 2015 - Practical Probabilistic Programming with Monads.pdf}
}

@inproceedings{narayanan_probabilistic_2016,
  title = {Probabilistic {{Inference}} by {{Program Transformation}} in {{Hakaru}} ({{System Description}})},
  volume = {9613},
  abstract = {We present Hakaru, a new probabilistic programming system that allows composable reuse of distributions, queries, and inference algorithms, all expressed in a single language of measures. The system implements two automatic and semantics-preserving program transformations\textemdash{}disintegration, which calculates conditional distributions, and simplification, which subsumes exact inference by computer algebra. We show how these features work together by describing the ideal workflow of a Hakaru user on two small problems. We highlight our composition of transformations and types in design and implementation.},
  language = {en},
  booktitle = {Functional and {{Logic Programming}}},
  publisher = {{Springer}},
  doi = {10.1007/978-3-319-29604-3_5},
  author = {Narayanan, Praveen and Carette, Jacques and Romano, Wren and Shan, Chung-chieh and Zinkov, Robert},
  month = mar,
  year = {2016},
  pages = {62-79},
  file = {/Users/doisinkidney/Zotero/storage/3CT4X7NF/system.pdf}
}

@inproceedings{uustalu_essence_2005,
  address = {Berlin, Heidelberg},
  series = {{{APLAS}}'05},
  title = {The {{Essence}} of {{Dataflow Programming}}},
  isbn = {978-3-540-29735-2},
  abstract = {We propose a novel, comonadic approach to dataflow (stream-based) computation. This is based on the observation that both general and causal stream functions can be characterized as coKleisli arrows of comonads and on the intuition that comonads in general must be a good means to structure context-dependent computation. In particular, we develop a generic comonadic interpreter of languages for context-dependent computation and instantiate it for stream-based computation. We also discuss distributive laws of a comonad over a monad as a means to structure combinations of effectful and context-dependent computation. We apply the latter to analyse clocked dataflow (partial stream based) computation.},
  booktitle = {Proceedings of the {{Third Asian Conference}} on {{Programming Languages}} and {{Systems}}},
  publisher = {{Springer-Verlag}},
  doi = {10.1007/11575467_2},
  author = {Uustalu, Tarmo and Vene, Varmo},
  year = {2005},
  pages = {2--18},
  file = {/Users/doisinkidney/Zotero/storage/88HNEVV5/cefp05.pdf}
}

@article{fritz_probability_2017,
  archivePrefix = {arXiv},
  eprinttype = {arxiv},
  eprint = {1712.05363},
  primaryClass = {cs, math},
  title = {A {{Probability Monad}} as the {{Colimit}} of {{Finite Powers}}},
  abstract = {We define a monad on the category of complete metric spaces with short maps, which assigns to each space the space of Radon probability measures on it with finite first moment, equipped with the Kantorovich-Wasserstein distance. It is analogous to the Giry monad on the category of Polish spaces, and it extends a construction due to van Breugel for compact and for 1-bounded complete metric spaces. We prove that this Kantorovich monad arises from a colimit construction on finite powers, which formalizes the intuition that probability measures are limits of finite samples. The proof relies on a criterion for when an ordinary left Kan extension of lax monoidal functors is a monoidal Kan extension. This colimit characterization allows for the development of integration theory and other things, such as the treatment of measures on spaces of measures, completely without measure theory. We also show that the category of algebras of the Kantorovich monad is equivalent to the category of closed convex subsets of Banach spaces with short affine maps as the morphisms.},
  journal = {arXiv:1712.05363 [cs, math]},
  author = {Fritz, Tobias and Perrone, Paolo},
  month = dec,
  year = {2017},
  keywords = {Computer Science - Logic in Computer Science,Mathematics - Category Theory,Mathematics - Probability,60A05; 18C15; 52A01},
  file = {/Users/doisinkidney/Zotero/storage/CKH7DWKK/Fritz and Perrone - 2017 - A Probability Monad as the Colimit of Finite Power.pdf;/Users/doisinkidney/Zotero/storage/BAT5UT2P/1712.html}
}

@article{noauthor_probability_nodate,
  title = {Probability {{Monad}}},
  language = {en},
  pages = {46},
  file = {/Users/doisinkidney/Zotero/storage/9EWHHSUK/Probability Monad.pdf}
}

@inproceedings{vandenbroucke_fixing_2015,
  title = {Fixing Non-Determinism},
  isbn = {978-1-4503-4273-5},
  abstract = {Non-deterministic computations are conventionally modelled by lists of their outcomes. This approach provides a concise declarative description of certain problems, as well as a way of generically solving such problems.},
  language = {en},
  publisher = {{ACM Press}},
  doi = {10.1145/2897336.2897342},
  author = {Vandenbroucke, Alexander and Schrijvers, Tom and Piessens, Frank},
  year = {2015},
  pages = {1-12},
  file = {/Users/doisinkidney/Zotero/storage/K2Q3SXL7/Vandenbroucke et al. - 2015 - Fixing non-determinism.pdf}
}

@article{fritz_bimonoidal_2018,
  archivePrefix = {arXiv},
  eprinttype = {arxiv},
  eprint = {1804.03527},
  primaryClass = {cs, math},
  title = {Bimonoidal {{Structure}} of {{Probability Monads}}},
  abstract = {We give a conceptual treatment of the notion of joints, marginals, and independence in the setting of categorical probability. This is achieved by endowing the usual probability monads (like the Giry monad) with a monoidal and an opmonoidal structure, mutually compatible (i.e. a bimonoidal structure). If the underlying monoidal category is cartesian monoidal, a bimonoidal structure is given uniquely by a commutative strength. However, if the underlying monoidal category is not cartesian monoidal, a strength is not enough to guarantee all the desired properties of joints and marginals. A bimonoidal structure is then the correct requirement for the more general case. We explain the theory and the operational interpretation, with the help of the graphical calculus for monoidal categories. We give a definition of stochastic independence based on the bimonoidal structure, compatible with the intuition and with other approaches in the literature for cartesian monoidal categories. We then show as an example that the Kantorovich monad on the category of complete metric spaces is a bimonoidal monad for a non-cartesian monoidal structure.},
  journal = {arXiv:1804.03527 [cs, math]},
  author = {Fritz, Tobias and Perrone, Paolo},
  month = apr,
  year = {2018},
  keywords = {Computer Science - Logic in Computer Science,Mathematics - Category Theory,Mathematics - Probability,60A05; 18C15; 16W30,Mathematics - Quantum Algebra},
  file = {/Users/doisinkidney/Zotero/storage/VSKXRVE4/Fritz and Perrone - 2018 - Bimonoidal Structure of Probability Monads.pdf;/Users/doisinkidney/Zotero/storage/CSMLIG25/1804.html}
}

@article{jacobs_probability_2018,
  title = {From Probability Monads to Commutative Effectuses},
  volume = {94},
  issn = {23522208},
  abstract = {Effectuses have recently been introduced as categorical models for quantum computation, with probabilistic and Boolean (classical) computation as special cases. These `probabilistic' models are called commutative effectuses, and are the focus of attention here. The paper describes the main known `probability' monads: the monad of discrete probability measures, the Giry monad, the expectation monad, the probabilistic power domain monad, the Radon monad, and the Kantorovich monad. It also introduces successive properties that a monad should satisfy so that its Kleisli category is a commutative effectus. The main properties are: partial additivity, strong affineness, and commutativity. It is shown that the resulting commutative effectus provides a categorical model of probability theory, including a logic using effect modules with parallel and sequential conjunction, predicate- and state-transformers, normalisation and conditioning of states.},
  language = {en},
  journal = {Journal of Logical and Algebraic Methods in Programming},
  doi = {10.1016/j.jlamp.2016.11.006},
  author = {Jacobs, Bart},
  month = jan,
  year = {2018},
  pages = {200-237},
  file = {/Users/doisinkidney/Zotero/storage/9CHSY6MJ/Jacobs - 2018 - From probability monads to commutative effectuses.pdf}
}

@misc{tobin_implementing_2017,
  title = {Implementing the {{Giry Monad}}},
  abstract = {In my last post I went over the categorical and measure-theoretic foundations of the Giry monad, the `canonical' probability monad that operates on the level of probability measures.

In this post I'll pick up from where I left off and talk about a neat and faithful (if impractical) implementation of the Giry monad that one can put together in Haskell.},
  journal = {jtobin.io},
  author = {Tobin, Jared},
  month = feb,
  year = {2017},
  file = {/Users/doisinkidney/Zotero/storage/QAMUSHEC/giry-monad-implementation.html}
}

@misc{munroe_xkcd_2007,
  title = {Xkcd: {{Random Number}}},
  language = {en},
  journal = {xkcd},
  author = {Munroe, Randall},
  month = feb,
  year = {2007},
  file = {/Users/doisinkidney/Zotero/storage/8G6L6YUX/random_number.png},
  note = {Title text: RFC 1149.5 specifies 4 as the standard IEEE-vetted random number.}
}

@book{gardner_2nd_1987,
  address = {Chicago},
  edition = {University of Chicago Press ed},
  title = {The 2nd {{Scientific American}} Book of Mathematical Puzzles \& Diversions},
  isbn = {978-0-226-28253-4},
  lccn = {QA95 .G3 1987},
  publisher = {{University of Chicago Press}},
  author = {Gardner, Martin},
  year = {1987},
  keywords = {Mathematical recreations}
}

@misc{box_linq_2007,
  title = {{{LINQ}}: .{{NET Language Integrated Query}}},
  shorttitle = {{{LINQ}}},
  abstract = {General-purpose query facilities added to the .NET Framework apply to all sources of information, not just relational or XML data. This facility is called .NET Language-Integrated Query (LINQ)},
  language = {en},
  publisher = {{Microsoft}},
  author = {Box, Don and Hejlsberg, Anders},
  month = feb,
  year = {2007},
  file = {/Users/doisinkidney/Zotero/storage/68RJIN9I/bb308959.html}
}


