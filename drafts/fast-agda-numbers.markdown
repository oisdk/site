---
title: Writing a Fast Number Implementation in Agda
tags: Agda
---

I've been messing around with some binary number implementations in Agda
recently and I have come across a few tricks to make the representation work
quickly.
In this post I'll go through a few of those tricks, which might be helpful for
other people writing Agda and struggling through its slowness.

# The Representation

First things first, I'm using zeroless binary numbers as the basic
representation.
They look like the following:

```agda
infixr 8 1แต_ 2แต_
data ๐น : Typeโ where
  0แต : ๐น
  1แต_ 2แต_ : ๐น โ ๐น
```

As you can see, this type is basically a list of booleans: it might be tempting,
therefore, to redefine the type in terms of lists and bools:

```agda
๐น : Typeโ
๐น = List Bool

infixr 8 1แต_ 2แต_
pattern 0แต = []
pattern 1แต_ xs = false โท xs
pattern 2แต_ xs = true  โท xs
```

Unfortunately, though, that will incur a pretty serious performance hit.
Agda tends to slow down when used with complex, nested types: the simple
non-parameterised type we defined first tends to work much faster.

# Conversion

The next thing to consider is the function to convert to and from the natural
numbers.
The conversion to is as follows:

```agda
โฆ_โโง : ๐น โ โ
โฆ 0แต โโง = 0
โฆ 1แต xs โโง = 1 + โฆ xs โโง * 2
โฆ 2แต xs โโง = 2 + โฆ xs โโง * 2
```

By using `+` and `*` here, we can leverage Agda's faster built-in natural number
types.
Those functions will call out to actually fast (ish) implementations on
Haskell's `Integer` type.
The actual expressions we use are quite important for proofs: we want to write
`n * 2` instead of `2 * n`, for instance, wherever possible.
This allows the proof that the binary numbers are isomorphic to the Peano to be
quite short:

<details>
<summary>Proof of isomorphism</summary>

```agda
inc-suc : โ x โ โฆ inc x โโง โก suc โฆ x โโง
inc-suc 0แต     i = 1
inc-suc (1แต x) i = 2 โ.+ โฆ x โโง โ.* 2
inc-suc (2แต x) i = suc (inc-suc x i โ.* 2)

inc-2*-1แต : โ n โ inc โฆ n โ.* 2 โโง โก 1แต โฆ n โโง
inc-2*-1แต zero    i = 1แต 0แต
inc-2*-1แต (suc n) i = inc (inc (inc-2*-1แต n i))

๐น-rightInv : โ x โ โฆ โฆ x โโง โโง โก x
๐น-rightInv zero    = refl
๐น-rightInv (suc x) = inc-suc โฆ x โโง ; cong suc (๐น-rightInv x)

๐น-leftInv : โ x โ โฆ โฆ x โโง โโง โก x
๐น-leftInv 0แต = refl
๐น-leftInv (1แต x) =           inc-2*-1แต โฆ x โโง  ; cong 1แต_ (๐น-leftInv x)
๐น-leftInv (2แต x) = cong inc (inc-2*-1แต โฆ x โโง) ; cong 2แต_ (๐น-leftInv x)

๐นโโ : ๐น โ โ
๐นโโ .fun = โฆ_โโง
๐นโโ .inv = โฆ_โโง
๐นโโ .rightInv = ๐น-rightInv
๐นโโ .leftInv  = ๐น-leftInv
```
</details>

The other function, converting *from* a peano number, is where performance
becomes a little trickier to achieve:

```agda
โฆ_โโง : โ โ ๐น
โฆ zero โโง = 0แต
โฆ suc n โโง = inc โฆ n โโง
```

# Strictness

The above conversion from the natural numbers is a classic example of a
space-leak in a language like Haskell.
Perhaps a little surprisingly, laziness itself isn't the culprit: the space leak
above would occur in a strict language also.
The problem is that we will build up a long chain of calls to `inc` before
evaluating any of them.
Where laziness does become a problem is when we attempt to solve the problem in
the traditional way: with an accumulator.

```agda
โฆ_โโง : โ โ ๐น
โฆ_โโง = go 0แต
  where
  go : ๐น โ โ โ ๐น
  go a zero    = a
  go a (suc n) = go (inc a) n
```

Here, laziness will preserve the space leak, since we don't force the evaluation
of `a` at any point.

Agda does have some strictness primitives, however, which we can use with the
following helper functions:

```agda
infixr 0 _$!_
_$!_ : {A : Type a} {B : A โ Type b} โ (โ x โ B x) โ โ x โ B x
f $! x = primForce x f
{-# INLINE _$!_ #-}

infixr 0 let-bang
let-bang : {A : Type a} {B : A โ Type b} โ โ x โ (โ x โ B x) โ B x
let-bang = primForce
{-# INLINE let-bang #-}

syntax let-bang v (ฮป x โ e) = let! x =! v in! e
```

This transforms our conversion function into the following:

```agda
โฆ_โโง : โ โ ๐น
โฆ_โโง = go 0แต
  where
  go : ๐น โ โ โ ๐น
  go a zero    = a
  go a (suc n) = let! aโฒ =! inc a in! go aโฒ n
```

(you do have to write a strict version of `inc` as well)

Actually, it is a little cleaner to recognise the more general pattern here, and
define the functions as strict folds on `โ`:

```agda
foldr-โ : (A โ A) โ A โ โ โ A
foldr-โ f b zero    = b
foldr-โ f b (suc n) = f (foldr-โ f b n)

foldl-โ-go : (A โ A) โ โ โ A โ A
foldl-โ-go f zero    x = x
foldl-โ-go f (suc n) x = foldl-โ-go f n $! f x

foldl-โ : (A โ A) โ A โ โ โ A
foldl-โ f x n = foldl-โ-go f n $! x
```

Then we can prove that both the strict and lazy forms of these functions are
equivalent:

```agda
f-comm : โ (f : A โ A) x n โ f (foldr-โ f x n) โก foldr-โ f (f x) n
f-comm f x zero    i = f x
f-comm f x (suc n) i = f (f-comm f x n i)

foldl-โ-foldr : โ f (x : A) n โ foldr-โ f x n โก foldl-โ f x n
foldl-โ-foldr f x zero    = sym ($!-โก (foldl-โ-go f zero) x)
foldl-โ-foldr f x (suc n) = f-comm f x n 
                          อพ foldl-โ-foldr f (f x) n 
                          อพ sym ($!-โก (foldl-โ-go f (suc n)) x)
```

This means we can define our conversion from the Peano numbers in the strict
form, but prove things about the lazy form.

# Termination

There is a way to convert from `โ` that is faster still: we could rely on Agda's
built-in `div` and `mod` functions to avoid the `inc` step altogether.

```agda
โฆ_โโง : โ โ ๐น
โฆ zero  โโง = 0แต
โฆ suc n โโง =
  if even n
  then 1แต โฆ n รท 2 โโง
  else 2แต โฆ n รท 2 โโง
```

This is asymptotically faster than any implementation which uses `inc`: however
it doesn't pass the termination checker.
As of yet, I haven't figured out how to get it to pass the termination checker
without incurring a serious performance penalty.

# Operations

<details>
<summary>Addition</summary>

```agda
addโ : ๐น โ ๐น โ ๐น
addโ : ๐น โ ๐น โ ๐น

addโ 0แต      ys      = inc ys
addโ (1แต xs) 0แต      = 2แต xs
addโ (2แต xs) 0แต      = 1แต inc xs
addโ (1แต xs) (1แต ys) = 1แต addโ xs ys
addโ (1แต xs) (2แต ys) = 2แต addโ xs ys
addโ (2แต xs) (1แต ys) = 2แต addโ xs ys
addโ (2แต xs) (2แต ys) = 1แต addโ xs ys

addโ 0แต      0แต      = 2แต 0แต
addโ 0แต      (1แต ys) = 1แต inc ys
addโ 0แต      (2แต ys) = 2แต inc ys
addโ (1แต xs) 0แต      = 1แต inc xs
addโ (2แต xs) 0แต      = 2แต inc xs
addโ (1แต xs) (1แต ys) = 2แต addโ xs ys
addโ (1แต xs) (2แต ys) = 1แต addโ xs ys
addโ (2แต xs) (1แต ys) = 1แต addโ xs ys
addโ (2แต xs) (2แต ys) = 2แต addโ xs ys

infixl 6 _+_
_+_ : ๐น โ ๐น โ ๐น
0แต      + ys      = ys
(1แต xs) + 0แต      = 1แต xs
(2แต xs) + 0แต      = 2แต xs
(1แต xs) + (1แต ys) = 2แต (xs + ys)
(1แต xs) + (2แต ys) = 1แต addโ xs ys
(2แต xs) + (1แต ys) = 1แต addโ xs ys
(2แต xs) + (2แต ys) = 2แต addโ xs ys
```
</details>


<details>
<summary>Multiplication</summary>

```agda
double : ๐น โ ๐น
double 0แต = 0แต
double (1แต xs) = 2แต double xs
double (2แต xs) = 2แต 1แต xs

infixl 7 _*_
_*_ : ๐น โ ๐น โ ๐น
0แต    * ys = 0แต
1แต xs * ys = ys + double (ys * xs)
2แต xs * ys = double (ys + ys * xs)
```
</details>


<details>
<summary>Subtraction</summary>

```agda
decโฒ : ๐น โ ๐น
dec : ๐น โ ๐น

decโฒ 0แต = 0แต
decโฒ (1แต xs) = 2แต decโฒ xs
decโฒ (2แต xs) = 2แต 1แต xs

dec 0แต = 0แต
dec (2แต xs) = 1แต xs
dec (1แต xs) = decโฒ xs

ones : โ โ ๐น โ ๐น
ones zero    xs = xs
ones (suc n) xs = ones n (1แต xs)

push : ๐น โ ๐น โ ๐น
push 0แต     xs      = xs
push (2แต t) xs      = push t (2แต xs)
push (1แต t) 0แต      = push t 0แต
push (1แต t) (1แต xs) = push t (1แต xs)
push (1แต t) (2แต xs) = push t (2แต 1แต xs)

subโ : โ โ ๐น โ ๐น โ ๐น โ ๐น
subโ : โ โ ๐น โ ๐น โ ๐น โ ๐น

subโ n t 0แต         ys      = 0แต
subโ n t (1แต xs)    (1แต ys) = subโ n (2แต t) xs ys
subโ n t (1แต xs)    (2แต ys) = subโ n (1แต t) xs ys
subโ n t (1แต xs)    0แต      = ones n (push (1แต t) (decโฒ xs))
subโ n t (2แต xs)    (2แต ys) = subโ n (2แต t) xs ys
subโ n t (2แต xs)    (1แต ys) = subโ n (1แต t) xs ys
subโ n t (2แต xs)    0แต      = ones n (push (2แต t) (decโฒ xs))

subโ n t 0แต      0แต      = ones n (push t 0แต)
subโ n t 0แต      (1แต ys) = 0แต
subโ n t 0แต      (2แต ys) = 0แต
subโ n t (1แต xs) 0แต      = ones n (push t (2แต decโฒ xs))
subโ n t (2แต xs) 0แต      = ones n (push t (2แต 1แต xs))
subโ n t (1แต xs) (1แต ys) = subโ n (1แต t) xs ys
subโ n t (2แต xs) (2แต ys) = subโ n (1แต t) xs ys
subโ n t (1แต xs) (2แต ys) = subโ n (2แต t) xs ys
subโ n t (2แต xs) (1แต ys) = subโ n (2แต t) xs ys

subโ : โ โ ๐น โ ๐น โ ๐น
subโ t 0แต      ys      = 0แต
subโ t (1แต xs) 0แต      = ones t (decโฒ xs)
subโ t (2แต xs) 0แต      = ones t (1แต xs)
subโ t (1แต xs) (1แต ys) = subโ (suc t) xs ys
subโ t (2แต xs) (2แต ys) = subโ (suc t) xs ys
subโ t (1แต xs) (2แต ys) = subโ t 0แต xs ys
subโ t (2แต xs) (1แต ys) = subโ t 0แต xs ys

subโ : โ โ ๐น โ ๐น โ ๐น
subโ t xs      0แต      = ones t xs
subโ t 0แต      (1แต ys) = 0แต
subโ t 0แต      (2แต ys) = 0แต
subโ t (1แต xs) (1แต ys) = subโ t 0แต xs ys
subโ t (2แต xs) (2แต ys) = subโ t 0แต xs ys
subโ t (2แต xs) (1แต ys) = subโ (suc t) xs ys
subโ t (1แต xs) (2แต ys) = subโ (suc t) xs ys

infixl 6 _-_
_-_ : ๐น โ ๐น โ ๐น
_-_ = subโ zero
```
</details>

# Testing Performance
