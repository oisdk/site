---
title: Depth Comonads
tags: Agda
bibliography: Depth Comonads.bib
---

<style>
.ascii-art {
    font-size: 30px;
}
.column {
    float: left;
    width: 50%;
}
.row:after {
    content: "";
    display: table;
    clear: both;
}
</style>

I haven't written much on this blog recently: since starting a PhD all of my writing output has gone towards paper drafts and similar things.
Recently, though, I've been thinking about streams, monoids, and comonads and I haven't manage to wrangle those thoughts into something coherent enough for a paper.
This blog post is a collection of those (pretty disorganised) thoughts.
The hope is that writing them down will force me to clarify things, but consider this a warning that the rest of this post may well be muddled and confusing.

<!--
<pre class="Agda"><a id="791" class="Symbol">{-#</a> <a id="795" class="Keyword">OPTIONS</a> <a id="803" class="Pragma">--no-positivity-check</a> <a id="825" class="Pragma">--allow-unsolved-metas</a> <a id="848" class="Pragma">--guardedness</a> <a id="862" class="Symbol">#-}</a>


<a id="868" class="Keyword">open</a> <a id="873" class="Keyword">import</a> <a id="880" href="../code/depth-comonads/DepthComonads.Prelude.html" class="Module">DepthComonads.Prelude</a>
<a id="902" class="Keyword">open</a> <a id="907" class="Keyword">import</a> <a id="914" href="../code/depth-comonads/DepthComonads.Nat.html" class="Module">DepthComonads.Nat</a>
<a id="932" class="Keyword">open</a> <a id="937" class="Keyword">import</a> <a id="944" href="../code/depth-comonads/DepthComonads.Algebra.html" class="Module">DepthComonads.Algebra</a>
<a id="966" class="Keyword">open</a> <a id="971" class="Keyword">import</a> <a id="978" href="../code/depth-comonads/DepthComonads.Relation.Binary.html" class="Module">DepthComonads.Relation.Binary</a> <a id="1008" class="Keyword">renaming</a> <a id="1017" class="Symbol">(</a><a id="1018" href="../code/depth-comonads/DepthComonads.Relation.Binary.html#2523" class="Record">TotalOrder</a> <a id="1029" class="Symbol">to</a> <a id="1032" class="Record">PolyTotalOrder</a><a id="1046" class="Symbol">)</a>

<a id="1049" class="Keyword">open</a> <a id="1054" href="../code/depth-comonads/DepthComonads.Algebra.html#4107" class="Module">Functor</a> <a id="1062" class="Symbol">‚¶É</a> <a id="1064" class="Symbol">...</a> <a id="1068" class="Symbol">‚¶Ñ</a>
<a id="1070" class="Keyword">open</a> <a id="1075" href="../code/depth-comonads/DepthComonads.Algebra.html#1492" class="Module">Monoid</a> <a id="1082" class="Symbol">‚¶É</a> <a id="1084" class="Symbol">...</a> <a id="1088" class="Symbol">‚¶Ñ</a>
<a id="1090" class="Comment">-- open PolyTotalOrder ‚¶É ... ‚¶Ñ hiding (refl; _‚âü_)</a>

<a id="TotalOrder"></a><a id="1141" href="#1141" class="Function">TotalOrder</a> <a id="1152" class="Symbol">:</a> <a id="1154" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="1159" href="../code/depth-comonads/DepthComonads.Level.html#253" class="Generalizable">a</a> <a id="1161" class="Symbol">‚Üí</a> <a id="1163" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="1168" class="Symbol">_</a>
<a id="1170" href="#1141" class="Function">TotalOrder</a> <a id="1181" href="#1181" class="Bound">A</a> <a id="1183" class="Symbol">=</a> <a id="1185" href="#1032" class="Record">PolyTotalOrder</a> <a id="1200" href="#1181" class="Bound">A</a> <a id="1202" href="../code/depth-comonads/Agda.Primitive.html#764" class="Primitive">‚Ñìzero</a> <a id="1208" href="../code/depth-comonads/Agda.Primitive.html#764" class="Primitive">‚Ñìzero</a>

<a id="1215" class="Keyword">variable</a>
  <a id="1226" href="#1226" class="Generalizable">ùêπ</a> <a id="1228" class="Symbol">:</a> <a id="1230" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="1235" class="Symbol">‚Üí</a> <a id="1237" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
</pre>-->

# Streams

The first thing I want to talk about is streams.

<pre class="Agda"><a id="1316" class="Keyword">record</a> <a id="Stream"></a><a id="1323" href="#1323" class="Record">Stream</a> <a id="1330" class="Symbol">(</a><a id="1331" href="#1331" class="Bound">A</a> <a id="1333" class="Symbol">:</a> <a id="1335" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="1339" class="Symbol">)</a> <a id="1341" class="Symbol">:</a> <a id="1343" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="1348" class="Keyword">where</a>
  <a id="1356" class="Keyword">coinductive</a>
  <a id="1370" class="Keyword">field</a> <a id="Stream.head"></a><a id="1376" href="#1376" class="Field">head</a> <a id="1381" class="Symbol">:</a> <a id="1383" href="#1331" class="Bound">A</a>
        <a id="Stream.tail"></a><a id="1393" href="#1393" class="Field">tail</a> <a id="1398" class="Symbol">:</a> <a id="1400" href="#1323" class="Record">Stream</a> <a id="1407" href="#1331" class="Bound">A</a>
</pre>
<!--
<pre class="Agda"><a id="1423" class="Keyword">open</a> <a id="1428" href="#1323" class="Module">Stream</a>
</pre>-->

This representation is *coinductive*: the type above contains infinite values.
Agda, unlike Haskell, treats inductive and coinductive types differently (this is why we need the `coinductive` keyword in the definition).
One of the differences is that it doesn't check termination for construction of these values:

<div class="row">
<div class="column">
<pre class="Agda"><a id="alternating"></a><a id="1801" href="#1801" class="Function">alternating</a> <a id="1813" class="Symbol">:</a> <a id="1815" href="#1323" class="Record">Stream</a> <a id="1822" href="../code/depth-comonads/Agda.Builtin.Bool.html#163" class="Datatype">Bool</a>
<a id="1827" href="#1801" class="Function">alternating</a> <a id="1839" class="Symbol">.</a><a id="1840" href="#1376" class="Field">head</a>       <a id="1851" class="Symbol">=</a> <a id="1853" href="../code/depth-comonads/Agda.Builtin.Bool.html#188" class="InductiveConstructor">true</a>
<a id="1858" href="#1801" class="Function">alternating</a> <a id="1870" class="Symbol">.</a><a id="1871" href="#1393" class="Field">tail</a> <a id="1876" class="Symbol">.</a><a id="1877" href="#1376" class="Field">head</a> <a id="1882" class="Symbol">=</a> <a id="1884" href="../code/depth-comonads/Agda.Builtin.Bool.html#182" class="InductiveConstructor">false</a>
<a id="1890" href="#1801" class="Function">alternating</a> <a id="1902" class="Symbol">.</a><a id="1903" href="#1393" class="Field">tail</a> <a id="1908" class="Symbol">.</a><a id="1909" href="#1393" class="Field">tail</a> <a id="1914" class="Symbol">=</a> <a id="1916" href="#1801" class="Function">alternating</a>
</pre></div>
<div class="column">
```haskell
alternating :: [Bool]
alternating = True : False : alternating
```
</div>
</div>

We have the equivalent in Haskell on the right.
We're also using some fancy syntax for the Agda code: copatterns [@abel_wellfounded_2013].

Note that this type is only definable in a language with some notion of laziness.
If we tried to define a value like `alternating` above in OCaml we would loop.
Haskell has no problem, and Agda---through its coinduction mechanism---can handle  it as well.

There is, however, an isomorphic type that can be defined without coinduction:

<div class="row">
<div class="column">
<pre class="Agda"><a id="‚Ñï-Stream"></a><a id="2573" href="#2573" class="Function">‚Ñï-Stream</a> <a id="2582" class="Symbol">:</a> <a id="2584" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="2589" class="Symbol">‚Üí</a> <a id="2591" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
<a id="2596" href="#2573" class="Function">‚Ñï-Stream</a> <a id="2605" href="#2605" class="Bound">A</a> <a id="2607" class="Symbol">=</a> <a id="2609" href="../code/depth-comonads/Agda.Builtin.Nat.html#192" class="Datatype">‚Ñï</a> <a id="2611" class="Symbol">‚Üí</a> <a id="2613" href="#2605" class="Bound">A</a>
</pre></div>
<div class="column">
<pre class="Agda"><a id="‚Ñï-alternating"></a><a id="2651" href="#2651" class="Function">‚Ñï-alternating</a> <a id="2665" class="Symbol">:</a> <a id="2667" href="#2573" class="Function">‚Ñï-Stream</a> <a id="2676" href="../code/depth-comonads/Agda.Builtin.Bool.html#163" class="Datatype">Bool</a>
<a id="2681" href="#2651" class="Function">‚Ñï-alternating</a> <a id="2695" href="../code/depth-comonads/Agda.Builtin.Nat.html#210" class="InductiveConstructor">zero</a>          <a id="2709" class="Symbol">=</a> <a id="2711" href="../code/depth-comonads/Agda.Builtin.Bool.html#188" class="InductiveConstructor">true</a>
<a id="2716" href="#2651" class="Function">‚Ñï-alternating</a> <a id="2730" class="Symbol">(</a><a id="2731" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="2735" href="../code/depth-comonads/Agda.Builtin.Nat.html#210" class="InductiveConstructor">zero</a><a id="2739" class="Symbol">)</a>    <a id="2744" class="Symbol">=</a> <a id="2746" href="../code/depth-comonads/Agda.Builtin.Bool.html#182" class="InductiveConstructor">false</a>
<a id="2752" href="#2651" class="Function">‚Ñï-alternating</a> <a id="2766" class="Symbol">(</a><a id="2767" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="2771" class="Symbol">(</a><a id="2772" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="2776" href="#2776" class="Bound">n</a><a id="2777" class="Symbol">))</a> <a id="2780" class="Symbol">=</a> <a id="2782" href="#2651" class="Function">‚Ñï-alternating</a> <a id="2796" href="#2776" class="Bound">n</a>
</pre></div>
</div>

(notice that, in this form, the function `‚Ñï-alternating` is the same function as `even : ‚Ñï ‚Üí Bool`)

In fact, we can convert from the coinductive representation to the inductive one.
This conversion function is more familiarly recognisable as the indexing function:

<pre class="Agda"><a id="_[_]"></a><a id="3088" href="#3088" class="Function Operator">_[_]</a> <a id="3093" class="Symbol">:</a> <a id="3095" href="#1323" class="Record">Stream</a> <a id="3102" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="3104" class="Symbol">‚Üí</a> <a id="3106" href="#2573" class="Function">‚Ñï-Stream</a> <a id="3115" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
<a id="3117" href="#3117" class="Bound">xs</a> <a id="3120" href="#3088" class="Function Operator">[</a> <a id="3122" href="../code/depth-comonads/Agda.Builtin.Nat.html#210" class="InductiveConstructor">zero</a>  <a id="3128" href="#3088" class="Function Operator">]</a> <a id="3130" class="Symbol">=</a> <a id="3132" href="#3117" class="Bound">xs</a> <a id="3135" class="Symbol">.</a><a id="3136" href="#1376" class="Field">head</a>
<a id="3141" href="#3141" class="Bound">xs</a> <a id="3144" href="#3088" class="Function Operator">[</a> <a id="3146" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="3150" href="#3150" class="Bound">n</a> <a id="3152" href="#3088" class="Function Operator">]</a> <a id="3154" class="Symbol">=</a> <a id="3156" href="#3141" class="Bound">xs</a> <a id="3159" class="Symbol">.</a><a id="3160" href="#1393" class="Field">tail</a> <a id="3165" href="#3088" class="Function Operator">[</a> <a id="3167" href="#3150" class="Bound">n</a> <a id="3169" href="#3088" class="Function Operator">]</a>
</pre>
I'm not just handwaving when I say the two representations are isomorphic: 
we can prove this isomorphism, and, in Cubical Agda, we can use this to transport programs on one representation to the other.

<details>
<summary>
Proof of isomorphism
</summary>

<pre class="Agda"><a id="tabulate"></a><a id="3437" href="#3437" class="Function">tabulate</a> <a id="3446" class="Symbol">:</a> <a id="3448" href="#2573" class="Function">‚Ñï-Stream</a> <a id="3457" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="3459" class="Symbol">‚Üí</a> <a id="3461" href="#1323" class="Record">Stream</a> <a id="3468" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
<a id="3470" href="#3437" class="Function">tabulate</a> <a id="3479" href="#3479" class="Bound">xs</a> <a id="3482" class="Symbol">.</a><a id="3483" href="#1376" class="Field">head</a> <a id="3488" class="Symbol">=</a> <a id="3490" href="#3479" class="Bound">xs</a> <a id="3493" href="../code/depth-comonads/Agda.Builtin.Nat.html#210" class="InductiveConstructor">zero</a>
<a id="3498" href="#3437" class="Function">tabulate</a> <a id="3507" href="#3507" class="Bound">xs</a> <a id="3510" class="Symbol">.</a><a id="3511" href="#1393" class="Field">tail</a> <a id="3516" class="Symbol">=</a> <a id="3518" href="#3437" class="Function">tabulate</a> <a id="3527" class="Symbol">(</a><a id="3528" href="#3507" class="Bound">xs</a> <a id="3531" href="../code/depth-comonads/DepthComonads.Function.html#125" class="Function Operator">‚àò</a> <a id="3533" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a><a id="3536" class="Symbol">)</a>

<a id="stream-rinv"></a><a id="3539" href="#3539" class="Function">stream-rinv</a> <a id="3551" class="Symbol">:</a> <a id="3553" class="Symbol">(</a><a id="3554" href="#3554" class="Bound">xs</a> <a id="3557" class="Symbol">:</a> <a id="3559" href="#1323" class="Record">Stream</a> <a id="3566" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a><a id="3567" class="Symbol">)</a> <a id="3569" class="Symbol">‚Üí</a> <a id="3571" href="#3437" class="Function">tabulate</a> <a id="3580" class="Symbol">(</a><a id="3581" href="#3554" class="Bound">xs</a> <a id="3584" href="#3088" class="Function Operator">[_]</a><a id="3587" class="Symbol">)</a> <a id="3589" href="../code/depth-comonads/Agda.Builtin.Cubical.Path.html#381" class="Function Operator">‚â°</a> <a id="3591" href="#3554" class="Bound">xs</a>
<a id="3594" href="#3539" class="Function">stream-rinv</a> <a id="3606" href="#3606" class="Bound">xs</a> <a id="3609" href="#3609" class="Bound">i</a> <a id="3611" class="Symbol">.</a><a id="3612" href="#1376" class="Field">head</a> <a id="3617" class="Symbol">=</a> <a id="3619" href="#3606" class="Bound">xs</a> <a id="3622" class="Symbol">.</a><a id="3623" href="#1376" class="Field">head</a>
<a id="3628" href="#3539" class="Function">stream-rinv</a> <a id="3640" href="#3640" class="Bound">xs</a> <a id="3643" href="#3643" class="Bound">i</a> <a id="3645" class="Symbol">.</a><a id="3646" href="#1393" class="Field">tail</a> <a id="3651" class="Symbol">=</a> <a id="3653" href="#3539" class="Function">stream-rinv</a> <a id="3665" class="Symbol">(</a><a id="3666" href="#3640" class="Bound">xs</a> <a id="3669" class="Symbol">.</a><a id="3670" href="#1393" class="Field">tail</a><a id="3674" class="Symbol">)</a> <a id="3676" href="#3643" class="Bound">i</a>

<a id="stream-linv"></a><a id="3679" href="#3679" class="Function">stream-linv</a> <a id="3691" class="Symbol">:</a> <a id="3693" class="Symbol">(</a><a id="3694" href="#3694" class="Bound">xs</a> <a id="3697" class="Symbol">:</a> <a id="3699" href="#2573" class="Function">‚Ñï-Stream</a> <a id="3708" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a><a id="3709" class="Symbol">)</a> <a id="3711" class="Symbol">(</a><a id="3712" href="#3712" class="Bound">n</a> <a id="3714" class="Symbol">:</a> <a id="3716" href="../code/depth-comonads/Agda.Builtin.Nat.html#192" class="Datatype">‚Ñï</a><a id="3717" class="Symbol">)</a> <a id="3719" class="Symbol">‚Üí</a> <a id="3721" href="#3437" class="Function">tabulate</a> <a id="3730" href="#3694" class="Bound">xs</a> <a id="3733" href="#3088" class="Function Operator">[</a> <a id="3735" href="#3712" class="Bound">n</a> <a id="3737" href="#3088" class="Function Operator">]</a> <a id="3739" href="../code/depth-comonads/Agda.Builtin.Cubical.Path.html#381" class="Function Operator">‚â°</a> <a id="3741" href="#3694" class="Bound">xs</a> <a id="3744" href="#3712" class="Bound">n</a>
<a id="3746" href="#3679" class="Function">stream-linv</a> <a id="3758" href="#3758" class="Bound">xs</a> <a id="3761" href="../code/depth-comonads/Agda.Builtin.Nat.html#210" class="InductiveConstructor">zero</a>    <a id="3769" class="Symbol">=</a> <a id="3771" href="Cubical.Foundations.Id.html#560" class="Function">refl</a>
<a id="3776" href="#3679" class="Function">stream-linv</a> <a id="3788" href="#3788" class="Bound">xs</a> <a id="3791" class="Symbol">(</a><a id="3792" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="3796" href="#3796" class="Bound">n</a><a id="3797" class="Symbol">)</a> <a id="3799" class="Symbol">=</a> <a id="3801" href="#3679" class="Function">stream-linv</a> <a id="3813" class="Symbol">(</a><a id="3814" href="#3788" class="Bound">xs</a> <a id="3817" href="../code/depth-comonads/DepthComonads.Function.html#125" class="Function Operator">‚àò</a> <a id="3819" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a><a id="3822" class="Symbol">)</a> <a id="3824" href="#3796" class="Bound">n</a>

<a id="stream-reps"></a><a id="3827" href="#3827" class="Function">stream-reps</a> <a id="3839" class="Symbol">:</a> <a id="3841" href="#2573" class="Function">‚Ñï-Stream</a> <a id="3850" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="3852" href="../code/depth-comonads/DepthComonads.Function.Isomorphism.html#308" class="Function Operator">‚áî</a> <a id="3854" href="#1323" class="Record">Stream</a> <a id="3861" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
<a id="3863" href="#3827" class="Function">stream-reps</a> <a id="3875" class="Symbol">.</a><a id="3876" href="Cubical.Foundations.Isomorphism.html#882" class="Field">fun</a> <a id="3880" class="Symbol">=</a> <a id="3882" href="#3437" class="Function">tabulate</a>
<a id="3891" href="#3827" class="Function">stream-reps</a> <a id="3903" class="Symbol">.</a><a id="3904" href="Cubical.Foundations.Isomorphism.html#898" class="Field">inv</a> <a id="3908" class="Symbol">=</a> <a id="3910" href="#3088" class="Function Operator">_[_]</a>
<a id="3915" href="#3827" class="Function">stream-reps</a> <a id="3927" class="Symbol">.</a><a id="3928" href="Cubical.Foundations.Isomorphism.html#914" class="Field">rightInv</a> <a id="3937" class="Symbol">=</a> <a id="3939" href="#3539" class="Function">stream-rinv</a>
<a id="3951" href="#3827" class="Function">stream-reps</a> <a id="3963" class="Symbol">.</a><a id="3964" href="Cubical.Foundations.Isomorphism.html#945" class="Field">leftInv</a> <a id="3972" href="#3972" class="Bound">xs</a> <a id="3975" class="Symbol">=</a> <a id="3977" href="Cubical.Foundations.Id.html#807" class="Function">funExt</a> <a id="3984" class="Symbol">(</a><a id="3985" href="#3679" class="Function">stream-linv</a> <a id="3997" href="#3972" class="Bound">xs</a><a id="3999" class="Symbol">)</a>
</pre>
</details>

One final observation about streams: another way to define a stream is as the 
cofree comonad of the identity functor.

<pre class="Agda"><a id="4142" class="Keyword">record</a> <a id="Cofree"></a><a id="4149" href="#4149" class="Record">Cofree</a> <a id="4156" class="Symbol">(</a><a id="4157" href="#4157" class="Bound">F</a> <a id="4159" class="Symbol">:</a> <a id="4161" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="4166" class="Symbol">‚Üí</a>¬†<a id="4168" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="4172" class="Symbol">)</a> <a id="4174" class="Symbol">(</a><a id="4175" href="#4175" class="Bound">A</a> <a id="4177" class="Symbol">:</a> <a id="4179" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="4183" class="Symbol">)</a> <a id="4185" class="Symbol">:</a> <a id="4187" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="4192" class="Keyword">where</a>
  <a id="4200" class="Keyword">coinductive</a>
  <a id="4214" class="Keyword">field</a> <a id="Cofree.root"></a><a id="4220" href="#4220" class="Field">root</a> <a id="4225" class="Symbol">:</a> <a id="4227" href="#4175" class="Bound">A</a>
        <a id="Cofree.step"></a><a id="4237" href="#4237" class="Field">step</a> <a id="4242" class="Symbol">:</a> <a id="4244" href="#4157" class="Bound">F</a> <a id="4246" class="Symbol">(</a><a id="4247" href="#4149" class="Record">Cofree</a> <a id="4254" href="#4157" class="Bound">F</a> <a id="4256" href="#4175" class="Bound">A</a><a id="4257" class="Symbol">)</a>

<a id="ùíû-Stream"></a><a id="4260" href="#4260" class="Function">ùíû-Stream</a> <a id="4269" class="Symbol">:</a> <a id="4271" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="4276" class="Symbol">‚Üí</a> <a id="4278" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
<a id="4283" href="#4260" class="Function">ùíû-Stream</a> <a id="4292" class="Symbol">=</a> <a id="4294" href="#4149" class="Record">Cofree</a> <a id="4301" href="../code/depth-comonads/DepthComonads.Function.html#561" class="Function">id</a>
</pre>
<!--
<pre class="Agda"><a id="4318" class="Keyword">open</a> <a id="4323" href="#4149" class="Module">Cofree</a>
</pre>-->

Concretely, the `Cofree F A` type is a possibly infinite tree, with branches shaped like `F`, and internal nodes labelled with `A`.
It has the following characteristic function:

<pre class="Agda"><a id="4522" class="Symbol">{-#</a> <a id="4526" class="Keyword">NON_TERMINATING</a> <a id="4542" class="Symbol">#-}</a>
<a id="trace"></a><a id="4546" href="#4546" class="Function">trace</a> <a id="4552" class="Symbol">:</a> <a id="4554" class="Symbol">‚¶É</a> <a id="4556" href="#4556" class="Bound">_</a> <a id="4558" class="Symbol">:</a> <a id="4560" href="../code/depth-comonads/DepthComonads.Algebra.html#4107" class="Record">Functor</a> <a id="4568" href="#1226" class="Generalizable">ùêπ</a> <a id="4570" class="Symbol">‚¶Ñ</a> <a id="4572" class="Symbol">‚Üí</a> <a id="4574" class="Symbol">(</a><a id="4575" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="4577" class="Symbol">‚Üí</a> <a id="4579" href="../code/depth-comonads/DepthComonads.Level.html#283" class="Generalizable">B</a><a id="4580" class="Symbol">)</a> <a id="4582" class="Symbol">‚Üí</a> <a id="4584" class="Symbol">(</a><a id="4585" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="4587" class="Symbol">‚Üí</a> <a id="4589" href="#1226" class="Generalizable">ùêπ</a> <a id="4591" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a><a id="4592" class="Symbol">)</a> <a id="4594" class="Symbol">‚Üí</a> <a id="4596" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="4598" class="Symbol">‚Üí</a> <a id="4600" href="#4149" class="Record">Cofree</a> <a id="4607" href="#1226" class="Generalizable">ùêπ</a> <a id="4609" href="../code/depth-comonads/DepthComonads.Level.html#283" class="Generalizable">B</a>
<a id="4611" href="#4546" class="Function">trace</a> <a id="4617" href="#4617" class="Bound">œï</a> <a id="4619" href="#4619" class="Bound">œÅ</a> <a id="4621" href="#4621" class="Bound">x</a> <a id="4623" class="Symbol">.</a><a id="4624" href="#4220" class="Field">root</a> <a id="4629" class="Symbol">=</a> <a id="4631" href="#4617" class="Bound">œï</a> <a id="4633" href="#4621" class="Bound">x</a>
<a id="4635" href="#4546" class="Function">trace</a> <a id="4641" href="#4641" class="Bound">œï</a> <a id="4643" href="#4643" class="Bound">œÅ</a> <a id="4645" href="#4645" class="Bound">x</a> <a id="4647" class="Symbol">.</a><a id="4648" href="#4237" class="Field">step</a> <a id="4653" class="Symbol">=</a> <a id="4655" href="../code/depth-comonads/DepthComonads.Algebra.html#4153" class="Field">map</a> <a id="4659" class="Symbol">(</a><a id="4660" href="#4546" class="Function">trace</a> <a id="4666" href="#4641" class="Bound">œï</a> <a id="4668" href="#4643" class="Bound">œÅ</a><a id="4669" class="Symbol">)</a> <a id="4671" class="Symbol">(</a><a id="4672" href="#4643" class="Bound">œÅ</a> <a id="4674" href="#4645" class="Bound">x</a><a id="4675" class="Symbol">)</a>
</pre>

Like how the free monad turns any functor into a monad,
the cofree comonad turns any functor into a comonad.
Comonads are less popular and widely-used than monads, as there are less well-known examples of them.
I have found it helpful to think about comonads through spatial analogies.
A lot of comonads can represent a kind of walk through some space: the `extract` operation tells you "what is immediately here", and the `duplicate` operation tells you "what can I see from each point".
For the stream, these two operations are inhabited by `head` and the following:

<pre class="Agda"><a id="duplicate"></a><a id="5257" href="#5257" class="Function">duplicate</a> <a id="5267" class="Symbol">:</a> <a id="5269" href="#1323" class="Record">Stream</a> <a id="5276" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="5278" class="Symbol">‚Üí</a> <a id="5280" href="#1323" class="Record">Stream</a> <a id="5287" class="Symbol">(</a><a id="5288" href="#1323" class="Record">Stream</a> <a id="5295" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a><a id="5296" class="Symbol">)</a>
<a id="5298" href="#5257" class="Function">duplicate</a> <a id="5308" href="#5308" class="Bound">xs</a> <a id="5311" class="Symbol">.</a><a id="5312" href="#1376" class="Field">head</a> <a id="5317" class="Symbol">=</a> <a id="5319" href="#5308" class="Bound">xs</a>
<a id="5322" href="#5257" class="Function">duplicate</a> <a id="5332" href="#5332" class="Bound">xs</a> <a id="5335" class="Symbol">.</a><a id="5336" href="#1393" class="Field">tail</a> <a id="5341" class="Symbol">=</a> <a id="5343" href="#5257" class="Function">duplicate</a> <a id="5353" class="Symbol">(</a><a id="5354" href="#5332" class="Bound">xs</a> <a id="5357" class="Symbol">.</a><a id="5358" href="#1393" class="Field">tail</a><a id="5362" class="Symbol">)</a>
</pre>
# Generalising Streams

There were three key observations in the last section:

#. Streams are coinductive.
   This requires a different termination checker in Agda, and a different evaluation model in strict languages.
#. They have an isomorphic representation based on *indexing*.
   This isomorphic representation doesn't need coinduction or laziness.
#. They are a special case of the cofree comonad.

Going forward, we're going to look at generalisations of streams, and we're going to see what these observations mean in the contexts of the new generalisations.

The thing we'll be generalising is the index of the stream.
Currently, streams are basically structures that assign a value to every `‚Ñï`: what does a stream of---for instance---rational numbers look like?
To drive the intuition for this generalisation let's first look at the comonad instance on the `‚Ñï-Stream` type:

<pre class="Agda"><a id="‚Ñï-extract"></a><a id="6260" href="#6260" class="Function">‚Ñï-extract</a> <a id="6270" class="Symbol">:</a> <a id="6272" href="#2573" class="Function">‚Ñï-Stream</a> <a id="6281" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="6283" class="Symbol">‚Üí</a> <a id="6285" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
<a id="6287" href="#6260" class="Function">‚Ñï-extract</a> <a id="6297" href="#6297" class="Bound">xs</a> <a id="6300" class="Symbol">=</a> <a id="6302" href="#6297" class="Bound">xs</a> <a id="6305" href="../code/depth-comonads/Agda.Builtin.Nat.html#210" class="InductiveConstructor">zero</a>

<a id="‚Ñï-duplicate"></a><a id="6311" href="#6311" class="Function">‚Ñï-duplicate</a> <a id="6323" class="Symbol">:</a> <a id="6325" href="#2573" class="Function">‚Ñï-Stream</a> <a id="6334" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="6336" class="Symbol">‚Üí</a> <a id="6338" href="#2573" class="Function">‚Ñï-Stream</a> <a id="6347" class="Symbol">(</a><a id="6348" href="#2573" class="Function">‚Ñï-Stream</a> <a id="6357" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a><a id="6358" class="Symbol">)</a>
<a id="6360" href="#6311" class="Function">‚Ñï-duplicate</a> <a id="6372" href="#6372" class="Bound">xs</a> <a id="6375" href="../code/depth-comonads/Agda.Builtin.Nat.html#210" class="InductiveConstructor">zero</a>    <a id="6383" class="Symbol">=</a> <a id="6385" href="#6372" class="Bound">xs</a>
<a id="6388" href="#6311" class="Function">‚Ñï-duplicate</a> <a id="6400" href="#6400" class="Bound">xs</a> <a id="6403" class="Symbol">(</a><a id="6404" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="6408" href="#6408" class="Bound">n</a><a id="6409" class="Symbol">)</a> <a id="6411" class="Symbol">=</a> <a id="6413" href="#6311" class="Function">‚Ñï-duplicate</a> <a id="6425" class="Symbol">(</a><a id="6426" href="#6400" class="Bound">xs</a> <a id="6429" href="../code/depth-comonads/DepthComonads.Function.html#125" class="Function Operator">‚àò</a> <a id="6431" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a><a id="6434" class="Symbol">)</a> <a id="6436" href="#6408" class="Bound">n</a>
</pre>
This is the same instance as is on the `Stream` type, transported along the isomorphism between the two types (we could have transported the instance automatically, using `subst` or `transport`; I have written it out here manually in full for illustration purposes).

The `‚Ñï-duplicate` method here can changed a little to reveal something
interesting:

<pre class="Agda"><a id="‚Ñï-duplicate‚ÇÇ"></a><a id="6800" href="#6800" class="Function">‚Ñï-duplicate‚ÇÇ</a> <a id="6813" class="Symbol">:</a> <a id="6815" href="#2573" class="Function">‚Ñï-Stream</a> <a id="6824" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="6826" class="Symbol">‚Üí</a> <a id="6828" href="#2573" class="Function">‚Ñï-Stream</a> <a id="6837" class="Symbol">(</a><a id="6838" href="#2573" class="Function">‚Ñï-Stream</a> <a id="6847" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a><a id="6848" class="Symbol">)</a>
<a id="6850" href="#6800" class="Function">‚Ñï-duplicate‚ÇÇ</a> <a id="6863" href="#6863" class="Bound">xs</a> <a id="6866" href="../code/depth-comonads/Agda.Builtin.Nat.html#210" class="InductiveConstructor">zero</a>    <a id="6874" href="#6874" class="Bound">m</a> <a id="6876" class="Symbol">=</a> <a id="6878" href="#6863" class="Bound">xs</a> <a id="6881" href="#6874" class="Bound">m</a>
<a id="6883" href="#6800" class="Function">‚Ñï-duplicate‚ÇÇ</a> <a id="6896" href="#6896" class="Bound">xs</a> <a id="6899" class="Symbol">(</a><a id="6900" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="6904" href="#6904" class="Bound">n</a><a id="6905" class="Symbol">)</a> <a id="6907" href="#6907" class="Bound">m</a> <a id="6909" class="Symbol">=</a> <a id="6911" href="#6800" class="Function">‚Ñï-duplicate‚ÇÇ</a> <a id="6924" class="Symbol">(</a><a id="6925" href="#6896" class="Bound">xs</a> <a id="6928" href="../code/depth-comonads/DepthComonads.Function.html#125" class="Function Operator">‚àò</a> <a id="6930" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a><a id="6933" class="Symbol">)</a> <a id="6935" href="#6904" class="Bound">n</a> <a id="6937" href="#6907" class="Bound">m</a>

<a id="‚Ñï-duplicate‚ÇÉ"></a><a id="6940" href="#6940" class="Function">‚Ñï-duplicate‚ÇÉ</a> <a id="6953" class="Symbol">:</a> <a id="6955" href="#2573" class="Function">‚Ñï-Stream</a> <a id="6964" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="6966" class="Symbol">‚Üí</a> <a id="6968" href="#2573" class="Function">‚Ñï-Stream</a> <a id="6977" class="Symbol">(</a><a id="6978" href="#2573" class="Function">‚Ñï-Stream</a> <a id="6987" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a><a id="6988" class="Symbol">)</a>
<a id="6990" href="#6940" class="Function">‚Ñï-duplicate‚ÇÉ</a> <a id="7003" href="#7003" class="Bound">xs</a> <a id="7006" href="#7006" class="Bound">n</a> <a id="7008" href="#7008" class="Bound">m</a> <a id="7010" class="Symbol">=</a> <a id="7012" href="#7003" class="Bound">xs</a> <a id="7015" class="Symbol">(</a><a id="7016" href="#7034" class="Function">go</a> <a id="7019" href="#7006" class="Bound">n</a> <a id="7021" href="#7008" class="Bound">m</a><a id="7022" class="Symbol">)</a>
  <a id="7026" class="Keyword">where</a>
  <a id="7034" href="#7034" class="Function">go</a> <a id="7037" class="Symbol">:</a> <a id="7039" href="../code/depth-comonads/Agda.Builtin.Nat.html#192" class="Datatype">‚Ñï</a> <a id="7041" class="Symbol">‚Üí</a> <a id="7043" href="../code/depth-comonads/Agda.Builtin.Nat.html#192" class="Datatype">‚Ñï</a> <a id="7045" class="Symbol">‚Üí</a> <a id="7047" href="../code/depth-comonads/Agda.Builtin.Nat.html#192" class="Datatype">‚Ñï</a>
  <a id="7051" href="#7034" class="Function">go</a> <a id="7054" href="../code/depth-comonads/Agda.Builtin.Nat.html#210" class="InductiveConstructor">zero</a>    <a id="7062" href="#7062" class="Bound">m</a> <a id="7064" class="Symbol">=</a> <a id="7066" href="#7062" class="Bound">m</a>
  <a id="7070" href="#7034" class="Function">go</a> <a id="7073" class="Symbol">(</a><a id="7074" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="7078" href="#7078" class="Bound">n</a><a id="7079" class="Symbol">)</a> <a id="7081" href="#7081" class="Bound">m</a> <a id="7083" class="Symbol">=</a> <a id="7085" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="7089" class="Symbol">(</a><a id="7090" href="#7034" class="Function">go</a> <a id="7093" href="#7078" class="Bound">n</a> <a id="7095" href="#7081" class="Bound">m</a><a id="7096" class="Symbol">)</a>

<a id="‚Ñï-duplicate‚ÇÑ"></a><a id="7099" href="#7099" class="Function">‚Ñï-duplicate‚ÇÑ</a> <a id="7112" class="Symbol">:</a> <a id="7114" href="#2573" class="Function">‚Ñï-Stream</a> <a id="7123" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="7125" class="Symbol">‚Üí</a> <a id="7127" href="#2573" class="Function">‚Ñï-Stream</a> <a id="7136" class="Symbol">(</a><a id="7137" href="#2573" class="Function">‚Ñï-Stream</a> <a id="7146" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a><a id="7147" class="Symbol">)</a>
<a id="7149" href="#7099" class="Function">‚Ñï-duplicate‚ÇÑ</a> <a id="7162" href="#7162" class="Bound">xs</a> <a id="7165" href="#7165" class="Bound">n</a> <a id="7167" href="#7167" class="Bound">m</a> <a id="7169" class="Symbol">=</a> <a id="7171" href="#7162" class="Bound">xs</a> <a id="7174" class="Symbol">(</a><a id="7175" href="#7165" class="Bound">n</a> <a id="7177" href="../code/depth-comonads/Agda.Builtin.Nat.html#325" class="Primitive Operator">+</a> <a id="7179" href="#7167" class="Bound">m</a><a id="7180" class="Symbol">)</a>
</pre>
In other words, `duplicate` basically adds indices.

There is something distinctly *monoidal* about what's going on here: taking the `(‚Ñï, +, 0)` monoid as focus, the `extract` method above corresponds to the monoidal empty element, and the `duplicate` method corresponds to the binary operator on monoids.
In actual fact, there is a comonad for any function from a monoid, often called the `Traced` comonad.

<!--
<pre class="Agda"><a id="7605" class="Keyword">variable</a> <a id="7614" href="#7614" class="Generalizable">E</a> <a id="7616" class="Symbol">:</a> <a id="7618" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
</pre>-->

<pre class="Agda"><a id="Traced"></a><a id="7636" href="#7636" class="Function">Traced</a> <a id="7643" class="Symbol">:</a> <a id="7645" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="7650" class="Symbol">‚Üí</a> <a id="7652" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="7657" class="Symbol">‚Üí</a> <a id="7659" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
<a id="7664" href="#7636" class="Function">Traced</a> <a id="7671" href="#7671" class="Bound">E</a> <a id="7673" href="#7673" class="Bound">A</a> <a id="7675" class="Symbol">=</a> <a id="7677" href="#7671" class="Bound">E</a> <a id="7679" class="Symbol">‚Üí</a> <a id="7681" href="#7673" class="Bound">A</a>

<a id="extract·µÄ"></a><a id="7684" href="#7684" class="Function">extract·µÄ</a> <a id="7693" class="Symbol">:</a> <a id="7695" class="Symbol">‚¶É</a> <a id="7697" href="#7697" class="Bound">_</a> <a id="7699" class="Symbol">:</a> <a id="7701" href="../code/depth-comonads/DepthComonads.Algebra.html#1492" class="Record">Monoid</a> <a id="7708" href="#7614" class="Generalizable">E</a> <a id="7710" class="Symbol">‚¶Ñ</a> <a id="7712" class="Symbol">‚Üí</a> <a id="7714" href="#7636" class="Function">Traced</a> <a id="7721" href="#7614" class="Generalizable">E</a> <a id="7723" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="7725" class="Symbol">‚Üí</a> <a id="7727" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
<a id="7729" href="#7684" class="Function">extract·µÄ</a> <a id="7738" href="#7738" class="Bound">xs</a> <a id="7741" class="Symbol">=</a> <a id="7743" href="#7738" class="Bound">xs</a> <a id="7746" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a>

<a id="duplicate·µÄ"></a><a id="7749" href="#7749" class="Function">duplicate·µÄ</a> <a id="7760" class="Symbol">:</a> <a id="7762" class="Symbol">‚¶É</a> <a id="7764" href="#7764" class="Bound">_</a> <a id="7766" class="Symbol">:</a> <a id="7768" href="../code/depth-comonads/DepthComonads.Algebra.html#1492" class="Record">Monoid</a> <a id="7775" href="#7614" class="Generalizable">E</a> <a id="7777" class="Symbol">‚¶Ñ</a> <a id="7779" class="Symbol">‚Üí</a> <a id="7781" href="#7636" class="Function">Traced</a> <a id="7788" href="#7614" class="Generalizable">E</a> <a id="7790" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="7792" class="Symbol">‚Üí</a> <a id="7794" href="#7636" class="Function">Traced</a> <a id="7801" href="#7614" class="Generalizable">E</a> <a id="7803" class="Symbol">(</a><a id="7804" href="#7636" class="Function">Traced</a> <a id="7811" href="#7614" class="Generalizable">E</a> <a id="7813" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a><a id="7814" class="Symbol">)</a>
<a id="7816" href="#7749" class="Function">duplicate·µÄ</a> <a id="7827" href="#7827" class="Bound">xs</a> <a id="7830" href="#7830" class="Bound">e‚ÇÅ</a> <a id="7833" href="#7833" class="Bound">e‚ÇÇ</a> <a id="7836" class="Symbol">=</a> <a id="7838" href="#7827" class="Bound">xs</a> <a id="7841" class="Symbol">(</a><a id="7842" href="#7830" class="Bound">e‚ÇÅ</a> <a id="7845" href="../code/depth-comonads/DepthComonads.Algebra.html#1530" class="Field Operator">‚àô</a> <a id="7847" href="#7833" class="Bound">e‚ÇÇ</a><a id="7849" class="Symbol">)</a>
</pre>
# Reifying Traced

The second observation we made about streams was that they had an isomorphic representation which didn't need coinduction.
What we can see above, with `Traced`, is a representation that *also* doesn't need coinduction.
So what is the corresponding coinductive representation?
What does a generalised *reified* stream look like?

So the first approach to reifying a function to a data structure is to simply represent the function as a list of pairs.

<pre class="Agda"><a id="C-Traced"></a><a id="8330" href="#8330" class="Function">C-Traced</a> <a id="8339" class="Symbol">:</a> <a id="8341" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="8346" class="Symbol">‚Üí</a> <a id="8348" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="8353" class="Symbol">‚Üí</a> <a id="8355" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
<a id="8360" href="#8330" class="Function">C-Traced</a> <a id="8369" href="#8369" class="Bound">E</a> <a id="8371" href="#8371" class="Bound">A</a> <a id="8373" class="Symbol">=</a> <a id="8375" href="#1323" class="Record">Stream</a> <a id="8382" class="Symbol">(</a><a id="8383" href="#8369" class="Bound">E</a> <a id="8385" href="../code/depth-comonads/DepthComonads.Sigma.html#542" class="Function Operator">√ó</a> <a id="8387" href="#8371" class="Bound">A</a><a id="8388" class="Symbol">)</a>
</pre>
This representation obviously isn't ideal: it isn't possible to construct an isomorphism between `C-Traced` and `Traced`.
We can---kind of---go in one direction, but even that function isn't terminating:

<pre class="Agda"><a id="8604" class="Symbol">{-#</a> <a id="8608" class="Keyword">NON_TERMINATING</a> <a id="8624" class="Symbol">#-}</a>
<a id="lookup-env"></a><a id="8628" href="#8628" class="Function">lookup-env</a> <a id="8639" class="Symbol">:</a> <a id="8641" class="Symbol">‚¶É</a> <a id="8643" href="#8643" class="Bound">_</a> <a id="8645" class="Symbol">:</a> <a id="8647" href="../code/depth-comonads/DepthComonads.Discrete.html#228" class="Record">IsDiscrete</a> <a id="8658" href="#7614" class="Generalizable">E</a> <a id="8660" class="Symbol">‚¶Ñ</a> <a id="8662" class="Symbol">‚Üí</a> <a id="8664" href="#8330" class="Function">C-Traced</a> <a id="8673" href="#7614" class="Generalizable">E</a> <a id="8675" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="8677" class="Symbol">‚Üí</a> <a id="8679" href="#7636" class="Function">Traced</a> <a id="8686" href="#7614" class="Generalizable">E</a> <a id="8688" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
<a id="8690" href="#8628" class="Function">lookup-env</a> <a id="8701" href="#8701" class="Bound">xs</a> <a id="8704" href="#8704" class="Bound">x</a> <a id="8706" class="Symbol">=</a> <a id="8708" href="../code/depth-comonads/DepthComonads.Bool.html#563" class="Function Operator">if</a> <a id="8711" href="../code/depth-comonads/DepthComonads.Dec.html#354" class="Field">does</a> <a id="8716" class="Symbol">(</a><a id="8717" href="#8704" class="Bound">x</a> <a id="8719" href="../code/depth-comonads/DepthComonads.Discrete.html#289" class="Field Operator">‚âü</a> <a id="8721" href="#8701" class="Bound">xs</a> <a id="8724" class="Symbol">.</a><a id="8725" href="#1376" class="Field">head</a> <a id="8730" class="Symbol">.</a><a id="8731" href="../code/depth-comonads/Agda.Builtin.Sigma.html#252" class="Field">fst</a><a id="8734" class="Symbol">)</a>
                     <a id="8757" href="../code/depth-comonads/DepthComonads.Bool.html#563" class="Function Operator">then</a> <a id="8762" href="#8701" class="Bound">xs</a> <a id="8765" class="Symbol">.</a><a id="8766" href="#1376" class="Field">head</a> <a id="8771" class="Symbol">.</a><a id="8772" href="../code/depth-comonads/Agda.Builtin.Sigma.html#264" class="Field">snd</a>
                     <a id="8797" href="../code/depth-comonads/DepthComonads.Bool.html#563" class="Function Operator">else</a> <a id="8802" href="#8628" class="Function">lookup-env</a> <a id="8813" class="Symbol">(</a><a id="8814" href="#8701" class="Bound">xs</a> <a id="8817" class="Symbol">.</a><a id="8818" href="#1393" class="Field">tail</a><a id="8822" class="Symbol">)</a> <a id="8824" href="#8704" class="Bound">x</a>
</pre>
I'm not too concerned with being fast and loose with termination and isomorphisms for the time being, though.
At the moment, I'm just interested in exploring the relationship between streams and the indexing functions.

As a result, let's try and push on this representation a little and see if it's possible to get something interesting and *almost* isomorphic.

# Segmented Streams

To get a slightly nicer representation we can exploit the monoid a little bit.
We can do this by storing *offsets* instead of the absolute indices for each entry.
The data structure I have in mind here looks a little like this:

<pre class="ascii-art">
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îâ
‚îÉx         ‚îÉy     ‚îÉz     ‚îâ
‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îâ
‚ïµ‚á§a‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚á•‚ïµ‚á§b‚ïå‚ïå‚ïå‚á•‚ïµ‚á§c‚ïå‚ïå‚ïå‚ïå‚îà
</pre>

Above is a stream containing the values `x`, `y`, and `z`.
Instead of each value corresponding to a single entry in the stream, however, they each correspond to a *segment*.
The value `x`, for instance, labels the first segment in the stream, which has a length given by `a`.
`y` labels the second segment, with length `b`, `z` with length `c`, and so on.

The `Traced` version of the above structure might be something like this:

```haskell
str :: Traced m a
str i | i < a         = x
      | i < a + b     = y
      | i < a + b + c = z
      | ...
```

So the index-value mapping is also segmented.
The stream, in this way, is kind of like a ruler, where different values mark out different quantities along the ruler, and the index function takes in a quantity and tells you which entry in the ruler that quantity corresponds to.

In code, we might represent the above data structure with the following type:

<pre class="Agda"><a id="10503" class="Keyword">record</a> <a id="Segments"></a><a id="10510" href="#10510" class="Record">Segments</a> <a id="10519" class="Symbol">(</a><a id="10520" href="#10520" class="Bound">E</a> <a id="10522" class="Symbol">:</a> <a id="10524" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="10528" class="Symbol">)</a> <a id="10530" class="Symbol">(</a><a id="10531" href="#10531" class="Bound">A</a> <a id="10533" class="Symbol">:</a> <a id="10535" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="10539" class="Symbol">)</a> <a id="10541" class="Symbol">:</a> <a id="10543" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="10548" class="Keyword">where</a>
  <a id="10556" class="Keyword">field</a>
    <a id="Segments.length"></a><a id="10566" href="#10566" class="Field">length</a> <a id="10573" class="Symbol">:</a> <a id="10575" href="#10520" class="Bound">E</a>
    <a id="Segments.label"></a><a id="10581" href="#10581" class="Field">label</a>  <a id="10588" class="Symbol">:</a> <a id="10590" href="#10531" class="Bound">A</a>
    <a id="Segments.next"></a><a id="10596" href="#10596" class="Field">next</a>   <a id="10603" class="Symbol">:</a> <a id="10605" href="#10510" class="Record">Segments</a> <a id="10614" href="#10520" class="Bound">E</a> <a id="10616" href="#10531" class="Bound">A</a>

<a id="10619" class="Keyword">open</a> <a id="10624" href="#10510" class="Module">Segments</a>
</pre>
The question is, then, how do we convert *this* structure to an `Traced` representation?

# Monuses

We need some extra operations on the monoid in the segments in order to enable this conversion to the `Traced` representation.
The extra operations are encapsulated by the monus algebra: I wrote about this in the paper I submitted with Nicolas Wu to ICFP last year [-@kidney_algebras_2021].
It's a simple algebra on monoids which basically encapsulates monoids which are ordered in a sensible way.

The basic idea is that we construct an order on monoids which says "x is smaller than y if there is some z that we can add to x to get to y".

<pre class="Agda"><a id="_‚âº_"></a><a id="11285" href="#11285" class="Function Operator">_‚âº_</a> <a id="11289" class="Symbol">:</a> <a id="11291" class="Symbol">‚¶É</a> <a id="11293" href="#11293" class="Bound">_</a> <a id="11295" class="Symbol">:</a> <a id="11297" href="../code/depth-comonads/DepthComonads.Algebra.html#1492" class="Record">Monoid</a> <a id="11304" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="11306" class="Symbol">‚¶Ñ</a> <a id="11308" class="Symbol">‚Üí</a> <a id="11310" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="11312" class="Symbol">‚Üí</a> <a id="11314" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="11316" class="Symbol">‚Üí</a> <a id="11318" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="11323" class="Symbol">_</a>
<a id="11325" href="#11325" class="Bound">x</a> <a id="11327" href="#11285" class="Function Operator">‚âº</a> <a id="11329" href="#11329" class="Bound">y</a> <a id="11331" class="Symbol">=</a> <a id="11333" href="../code/depth-comonads/DepthComonads.Sigma.html#260" class="Function">‚àÉ</a> <a id="11335" href="#11335" class="Bound">z</a> <a id="11337" href="../code/depth-comonads/DepthComonads.Sigma.html#260" class="Function">√ó</a> <a id="11339" class="Symbol">(</a><a id="11340" href="#11329" class="Bound">y</a> <a id="11342" href="../code/depth-comonads/Agda.Builtin.Cubical.Path.html#381" class="Function Operator">‚â°</a> <a id="11344" href="#11325" class="Bound">x</a> <a id="11346" href="../code/depth-comonads/DepthComonads.Algebra.html#1530" class="Field Operator">‚àô</a> <a id="11348" href="#11335" class="Bound">z</a><a id="11349" class="Symbol">)</a>
</pre>
A monus is a monoid where we can extract that `z`, when it exists.
On the monoid `(‚Ñï, +, 0)`, for instance, this order corresponds to the normal ordering on `‚Ñï`.

<!--

<pre class="Agda"><a id="11529" class="Keyword">open</a> <a id="11534" class="Keyword">import</a> <a id="11541" href="../code/depth-comonads/DepthComonads.Nat.Properties.html" class="Module">DepthComonads.Nat.Properties</a>

<a id="11571" class="Keyword">instance</a>
  <a id="‚Ñï-+-monoid"></a><a id="11582" href="#11582" class="Function">‚Ñï-+-monoid</a> <a id="11593" class="Symbol">:</a> <a id="11595" href="../code/depth-comonads/DepthComonads.Algebra.html#1492" class="Record">Monoid</a> <a id="11602" href="../code/depth-comonads/Agda.Builtin.Nat.html#192" class="Datatype">‚Ñï</a>
  <a id="11606" href="#11582" class="Function">‚Ñï-+-monoid</a> <a id="11617" class="Symbol">=</a> <a id="11619" class="Keyword">record</a> <a id="11626" class="Symbol">{</a> <a id="11628" href="../code/depth-comonads/DepthComonads.Algebra.html#1530" class="Field Operator">_‚àô_</a>   <a id="11634" class="Symbol">=</a> <a id="11636" href="../code/depth-comonads/Agda.Builtin.Nat.html#325" class="Primitive Operator">_+_</a>
                      <a id="11662" class="Symbol">;</a> <a id="11664" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a>     <a id="11670" class="Symbol">=</a> <a id="11672" href="../code/depth-comonads/Agda.Builtin.Nat.html#210" class="InductiveConstructor">zero</a>
                      <a id="11699" class="Symbol">;</a> <a id="11701" href="../code/depth-comonads/DepthComonads.Algebra.html#1572" class="Field">assoc</a> <a id="11707" class="Symbol">=</a> <a id="11709" href="../code/depth-comonads/DepthComonads.Nat.Properties.html#200" class="Function">+-assoc</a>
                      <a id="11739" class="Symbol">;</a> <a id="11741" href="../code/depth-comonads/DepthComonads.Algebra.html#1623" class="Field">Œµ‚àô</a>    <a id="11747" class="Symbol">=</a> <a id="11749" class="Symbol">Œª</a> <a id="11751" href="#11751" class="Bound">_</a> <a id="11753" class="Symbol">‚Üí</a> <a id="11755" href="Cubical.Foundations.Id.html#560" class="Function">refl</a>
                      <a id="11782" class="Symbol">;</a> <a id="11784" href="../code/depth-comonads/DepthComonads.Algebra.html#1650" class="Field">‚àôŒµ</a>    <a id="11790" class="Symbol">=</a> <a id="11792" href="../code/depth-comonads/DepthComonads.Nat.Properties.html#301" class="Function">+0</a>
                      <a id="11817" class="Symbol">}</a>
</pre>
-->



Extracting the `z` above corresponds to a kind of difference operator:

<pre class="Agda"><a id="_‚à∏_"></a><a id="11907" href="#11907" class="Function Operator">_‚à∏_</a> <a id="11911" class="Symbol">:</a> <a id="11913" href="../code/depth-comonads/Agda.Builtin.Nat.html#192" class="Datatype">‚Ñï</a> <a id="11915" class="Symbol">‚Üí</a> <a id="11917" href="../code/depth-comonads/Agda.Builtin.Nat.html#192" class="Datatype">‚Ñï</a> <a id="11919" class="Symbol">‚Üí</a> <a id="11921" href="../code/depth-comonads/Agda.Builtin.Nat.html#192" class="Datatype">‚Ñï</a>
<a id="11923" href="#11923" class="Bound">x</a>     <a id="11929" href="#11907" class="Function Operator">‚à∏</a> <a id="11931" href="../code/depth-comonads/Agda.Builtin.Nat.html#210" class="InductiveConstructor">zero</a>  <a id="11937" class="Symbol">=</a> <a id="11939" href="#11923" class="Bound">x</a>
<a id="11941" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="11945" href="#11945" class="Bound">x</a> <a id="11947" href="#11907" class="Function Operator">‚à∏</a> <a id="11949" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="11953" href="#11953" class="Bound">y</a> <a id="11955" class="Symbol">=</a> <a id="11957" href="#11945" class="Bound">x</a> <a id="11959" href="#11907" class="Function Operator">‚à∏</a> <a id="11961" href="#11953" class="Bound">y</a>
<a id="11963" class="CatchallClause Symbol">_</a><a id="11964" class="CatchallClause">     </a><a id="11969" href="#11907" class="CatchallClause Function Operator">‚à∏</a><a id="11970" class="CatchallClause"> </a><a id="11971" class="CatchallClause Symbol">_</a>     <a id="11977" class="Symbol">=</a> <a id="11979" href="../code/depth-comonads/Agda.Builtin.Nat.html#210" class="InductiveConstructor">zero</a>
</pre>
This operator is sometimes called the monus.
It is a kind of partial, or truncating, subtraction:


<pre class="Agda"><a id="12093" href="#12093" class="Function">_</a> <a id="12095" class="Symbol">:</a> <a id="12097" class="Number">5</a> <a id="12099" href="#11907" class="Function Operator">‚à∏</a> <a id="12101" class="Number">2</a> <a id="12103" href="../code/depth-comonads/Agda.Builtin.Cubical.Path.html#381" class="Function Operator">‚â°</a> <a id="12105" class="Number">3</a>
<a id="12107" class="Symbol">_</a> <a id="12109" class="Symbol">=</a> <a id="12111" href="Cubical.Foundations.Id.html#560" class="Function">refl</a>

<a id="12117" href="#12117" class="Function">_</a> <a id="12119" class="Symbol">:</a> <a id="12121" class="Number">2</a> <a id="12123" href="#11907" class="Function Operator">‚à∏</a> <a id="12125" class="Number">5</a> <a id="12127" href="../code/depth-comonads/Agda.Builtin.Cubical.Path.html#381" class="Function Operator">‚â°</a> <a id="12129" class="Number">0</a>
<a id="12131" class="Symbol">_</a> <a id="12133" class="Symbol">=</a> <a id="12135" href="Cubical.Foundations.Id.html#560" class="Function">refl</a>
</pre>
And, indeed, this operator "extracts" the `z`, when it exists.

<pre class="Agda"><a id="‚à∏‚Äøis-monus"></a><a id="12213" href="#12213" class="Function">‚à∏‚Äøis-monus</a> <a id="12224" class="Symbol">:</a> <a id="12226" class="Symbol">‚àÄ</a> <a id="12228" href="#12228" class="Bound">x</a> <a id="12230" href="#12230" class="Bound">y</a> <a id="12232" class="Symbol">‚Üí</a> <a id="12234" class="Symbol">(</a><a id="12235" href="#12235" class="Bound">x‚âºy</a> <a id="12239" class="Symbol">:</a> <a id="12241" href="#12228" class="Bound">x</a> <a id="12243" href="#11285" class="Function Operator">‚âº</a> <a id="12245" href="#12230" class="Bound">y</a><a id="12246" class="Symbol">)</a> <a id="12248" class="Symbol">‚Üí</a> <a id="12250" href="#12230" class="Bound">y</a> <a id="12252" href="#11907" class="Function Operator">‚à∏</a> <a id="12254" href="#12228" class="Bound">x</a> <a id="12256" href="../code/depth-comonads/Agda.Builtin.Cubical.Path.html#381" class="Function Operator">‚â°</a> <a id="12258" href="../code/depth-comonads/Agda.Builtin.Sigma.html#252" class="Field">fst</a> <a id="12262" href="#12235" class="Bound">x‚âºy</a>
<a id="12266" href="#12213" class="Function">‚à∏‚Äøis-monus</a> <a id="12277" href="../code/depth-comonads/Agda.Builtin.Nat.html#210" class="InductiveConstructor">zero</a>    <a id="12285" class="Symbol">_</a>       <a id="12293" class="Symbol">(</a><a id="12294" href="#12294" class="Bound">z</a> <a id="12296" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="12298" href="#12298" class="Bound">y‚â°0+z</a><a id="12303" class="Symbol">)</a> <a id="12305" class="Symbol">=</a> <a id="12307" href="#12298" class="Bound">y‚â°0+z</a>
<a id="12313" href="#12213" class="Function">‚à∏‚Äøis-monus</a> <a id="12324" class="Symbol">(</a><a id="12325" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="12329" href="#12329" class="Bound">x</a><a id="12330" class="Symbol">)</a> <a id="12332" class="Symbol">(</a><a id="12333" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="12337" href="#12337" class="Bound">y</a><a id="12338" class="Symbol">)</a> <a id="12340" class="Symbol">(</a><a id="12341" href="#12341" class="Bound">z</a> <a id="12343" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="12345" href="#12345" class="Bound">y‚â°x+z</a><a id="12350" class="Symbol">)</a> <a id="12352" class="Symbol">=</a> <a id="12354" href="#12213" class="Function">‚à∏‚Äøis-monus</a> <a id="12365" href="#12329" class="Bound">x</a> <a id="12367" href="#12337" class="Bound">y</a> <a id="12369" class="Symbol">(</a><a id="12370" href="#12341" class="Bound">z</a> <a id="12372" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="12374" href="../code/depth-comonads/DepthComonads.Nat.Properties.html#415" class="Function">suc-inj</a> <a id="12382" href="#12345" class="Bound">y‚â°x+z</a><a id="12387" class="Symbol">)</a>
<a id="12389" href="#12213" class="Function">‚à∏‚Äøis-monus</a> <a id="12400" class="Symbol">(</a><a id="12401" href="../code/depth-comonads/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="12405" href="#12405" class="Bound">x</a><a id="12406" class="Symbol">)</a> <a id="12408" href="../code/depth-comonads/Agda.Builtin.Nat.html#210" class="InductiveConstructor">zero</a>    <a id="12416" class="Symbol">(</a><a id="12417" href="#12417" class="Bound">z</a> <a id="12419" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="12421" href="#12421" class="Bound">0‚â°x+z</a><a id="12426" class="Symbol">)</a> <a id="12428" class="Symbol">=</a> <a id="12430" href="../code/depth-comonads/DepthComonads.Empty.html#172" class="Function">‚ä•-elim</a> <a id="12437" class="Symbol">(</a><a id="12438" href="../code/depth-comonads/DepthComonads.Nat.Properties.html#535" class="Function">zero‚â¢suc</a> <a id="12447" href="#12421" class="Bound">0‚â°x+z</a><a id="12452" class="Symbol">)</a>
</pre>
<!--

<pre class="Agda"><a id="12469" class="Keyword">open</a> <a id="12474" class="Keyword">import</a> <a id="12481" href="../code/depth-comonads/DepthComonads.Algebra.Monus.html" class="Module">DepthComonads.Algebra.Monus</a> <a id="12509" class="Keyword">renaming</a> <a id="12518" class="Symbol">(</a><a id="12519" href="../code/depth-comonads/DepthComonads.Algebra.Monus.html#4916" class="Record">TMAPOM</a> <a id="12526" class="Symbol">to</a> <a id="12529" class="Record">Monus</a><a id="12534" class="Symbol">)</a>
<a id="12536" class="Keyword">open</a> <a id="12541" href="#12529" class="Module">Monus</a> <a id="12547" class="Symbol">‚¶É</a> <a id="12549" class="Symbol">...</a> <a id="12553" class="Symbol">‚¶Ñ</a> <a id="12555" class="Keyword">hiding</a> <a id="12562" class="Symbol">(</a><a id="12563" href="../code/depth-comonads/DepthComonads.Algebra.html#1530" class="Function Operator">_‚àô_</a><a id="12566" class="Symbol">;</a> <a id="12568" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Function">Œµ</a><a id="12569" class="Symbol">;</a> <a id="12571" href="../code/depth-comonads/DepthComonads.Algebra.html#1572" class="Function">assoc</a><a id="12576" class="Symbol">;</a> <a id="12578" href="../code/depth-comonads/DepthComonads.Algebra.html#1650" class="Function">‚àôŒµ</a><a id="12580" class="Symbol">;</a> <a id="12582" href="../code/depth-comonads/DepthComonads.Algebra.html#1623" class="Function">Œµ‚àô</a><a id="12584" class="Symbol">;</a> <a id="12586" href="../code/depth-comonads/DepthComonads.Algebra.html#2675" class="Function">monoid</a><a id="12592" class="Symbol">)</a>
</pre>
-->

Our definition of a monus is simple: a monus is anything where the order ‚âº, sometimes called the "algebraic preorder", is total and antisymmetric.
This is precisely what lets us write a function which takes the `Segments` type and converts it back to the `Traced` type.

<pre class="Agda"><a id="12879" class="Symbol">{-#</a> <a id="12883" class="Keyword">NON_TERMINATING</a> <a id="12899" class="Symbol">#-}</a>
<a id="Segments‚ÜíTraced"></a><a id="12903" href="#12903" class="Function">Segments‚ÜíTraced</a> <a id="12919" class="Symbol">:</a> <a id="12921" class="Symbol">‚¶É</a> <a id="12923" href="#12923" class="Bound">_</a> <a id="12925" class="Symbol">:</a> <a id="12927" href="#12529" class="Record">Monus</a> <a id="12933" href="#7614" class="Generalizable">E</a> <a id="12935" class="Symbol">‚¶Ñ</a> <a id="12937" class="Symbol">‚Üí</a> <a id="12939" href="#10510" class="Record">Segments</a> <a id="12948" href="#7614" class="Generalizable">E</a> <a id="12950" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="12952" class="Symbol">‚Üí</a> <a id="12954" href="#7636" class="Function">Traced</a> <a id="12961" href="#7614" class="Generalizable">E</a> <a id="12963" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
<a id="12965" href="#12903" class="Function">Segments‚ÜíTraced</a> <a id="12981" href="#12981" class="Bound">xs</a> <a id="12984" href="#12984" class="Bound">i</a> <a id="12986" class="Keyword">with</a> <a id="12991" href="#12981" class="Bound">xs</a> <a id="12994" class="Symbol">.</a><a id="12995" href="#10566" class="Field">length</a> <a id="13002" href="../code/depth-comonads/DepthComonads.Relation.Binary.html#3314" class="Function Operator">‚â§?</a> <a id="13005" href="#12984" class="Bound">i</a>
<a id="13007" class="Symbol">...</a> <a id="13011" class="Symbol">|</a> <a id="13013" href="../code/depth-comonads/DepthComonads.Dec.html#420" class="InductiveConstructor">yes</a> <a id="13017" class="Symbol">(</a><a id="13018" href="#13018" class="Bound">j</a> <a id="13020" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="13022" href="#13022" class="Bound">i‚â°xs‚Çó‚àôj</a><a id="13029" class="Symbol">)</a> <a id="13031" class="Symbol">=</a> <a id="13033" href="#12903" class="Function">Segments‚ÜíTraced</a> <a id="13049" class="Symbol">(</a><a id="13050" class="Bound">xs</a> <a id="13053" class="Symbol">.</a><a id="13054" href="#10596" class="Field">next</a><a id="13058" class="Symbol">)</a> <a id="13060" href="#13018" class="Bound">j</a>
<a id="13062" class="Symbol">...</a> <a id="13066" class="Symbol">|</a> <a id="13068" href="../code/depth-comonads/DepthComonads.Dec.html#454" class="InductiveConstructor">no</a>  <a id="13072" class="Symbol">_</a>             <a id="13086" class="Symbol">=</a> <a id="13088" class="Bound">xs</a> <a id="13091" class="Symbol">.</a><a id="13092" href="#10581" class="Field">label</a>
</pre>
This function takes an index, and checks if that length is greater than or equal to the first segment in the stream of segments.
If it is, then it continues searching through the rest of the segments with the index reduced by the size of that first segment.
If not, then it returns the label of the first segment.

Taking the old example, we are basically converting to ‚à∏ from +:

```haskell
str :: Traced m a
str i | i         < a = x
      | i ‚à∏ a     < b = y
      | i ‚à∏ a ‚à∏ b < c = z
      | ...
```

The first issue here is that this definition is not terminating.
That might seem an insurmountable problem at first---we are searching through an infinite stream, after all---but notice that there is one paremeter which is decreasing on each recursive call: the index.
Well, it only decreases if the segment is non-zero: this can be enforced by changing the definition of the segments type:

<pre class="Agda"><a id="14004" class="Keyword">record</a> <a id="‚Ñ±-Segments"></a><a id="14011" href="#14011" class="Record">‚Ñ±-Segments</a> <a id="14022" class="Symbol">(</a><a id="14023" href="#14023" class="Bound">E</a> <a id="14025" class="Symbol">:</a> <a id="14027" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="14031" class="Symbol">)</a> <a id="14033" class="Symbol">‚¶É</a> <a id="14035" href="#14035" class="Bound">_</a> <a id="14037" class="Symbol">:</a> <a id="14039" href="#12529" class="Record">Monus</a> <a id="14045" href="#14023" class="Bound">E</a> <a id="14047" class="Symbol">‚¶Ñ</a> <a id="14049" class="Symbol">(</a><a id="14050" href="#14050" class="Bound">A</a> <a id="14052" class="Symbol">:</a> <a id="14054" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="14058" class="Symbol">)</a> <a id="14060" class="Symbol">:</a> <a id="14062" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="14067" class="Keyword">where</a>
  <a id="14075" class="Keyword">coinductive</a>
  <a id="14089" class="Keyword">field</a>
    <a id="‚Ñ±-Segments.label"></a><a id="14099" href="#14099" class="Field">label</a>    <a id="14108" class="Symbol">:</a> <a id="14110" href="#14050" class="Bound">A</a>
    <a id="‚Ñ±-Segments.length"></a><a id="14116" href="#14116" class="Field">length</a>   <a id="14125" class="Symbol">:</a> <a id="14127" href="#14023" class="Bound">E</a>
    <a id="‚Ñ±-Segments.length‚â¢Œµ"></a><a id="14133" href="#14133" class="Field">length‚â¢Œµ</a> <a id="14142" class="Symbol">:</a> <a id="14144" class="Field">length</a> <a id="14151" href="../code/depth-comonads/DepthComonads.Path.html#561" class="Function Operator">‚â¢</a> <a id="14153" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a>
    <a id="‚Ñ±-Segments.next"></a><a id="14159" href="#14159" class="Field">next</a>     <a id="14168" class="Symbol">:</a> <a id="14170" href="#14011" class="Record">‚Ñ±-Segments</a> <a id="14181" href="#14023" class="Bound">E</a> <a id="14183" href="#14050" class="Bound">A</a>

<a id="14186" class="Keyword">open</a> <a id="14191" href="#14011" class="Module">‚Ñ±-Segments</a>
</pre>
This type allows us to write the following definition:

<pre class="Agda"><a id="14267" class="Keyword">module</a> <a id="14274" href="#14274" class="Module">_</a> <a id="14276" class="Symbol">‚¶É</a> <a id="14278" href="#14278" class="Bound">_</a> <a id="14280" class="Symbol">:</a> <a id="14282" href="#12529" class="Record">Monus</a> <a id="14288" href="#7614" class="Generalizable">E</a> <a id="14290" class="Symbol">‚¶Ñ</a> <a id="14292" class="Symbol">(</a><a id="14293" href="#14293" class="Bound">wf</a> <a id="14296" class="Symbol">:</a> <a id="14298" href="../code/depth-comonads/DepthComonads.WellFounded.html#230" class="Function">WellFounded</a> <a id="14310" href="../code/depth-comonads/DepthComonads.Algebra.Monus.html#2522" class="Function Operator">_‚â∫_</a><a id="14313" class="Symbol">)</a> <a id="14315" class="Keyword">where</a>
  <a id="14323" href="#14323" class="Function">wf-index</a> <a id="14332" class="Symbol">:</a> <a id="14334" href="#14011" class="Record">‚Ñ±-Segments</a> <a id="14345" href="#14288" class="Bound">E</a> <a id="14347" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="14349" class="Symbol">‚Üí</a> <a id="14351" class="Symbol">(</a><a id="14352" href="#14352" class="Bound">i</a> <a id="14354" class="Symbol">:</a> <a id="14356" href="#14288" class="Bound">E</a><a id="14357" class="Symbol">)</a> <a id="14359" class="Symbol">‚Üí</a> <a id="14361" href="../code/depth-comonads/DepthComonads.WellFounded.html#113" class="Datatype">Acc</a> <a id="14365" href="../code/depth-comonads/DepthComonads.Algebra.Monus.html#2522" class="Function Operator">_‚â∫_</a> <a id="14369" href="#14352" class="Bound">i</a> <a id="14371" class="Symbol">‚Üí</a> <a id="14373" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
  <a id="14377" href="#14323" class="Function">wf-index</a> <a id="14386" href="#14386" class="Bound">xs</a> <a id="14389" href="#14389" class="Bound">i</a> <a id="14391" href="#14391" class="Bound">a</a> <a id="14393" class="Keyword">with</a> <a id="14398" href="#14386" class="Bound">xs</a> <a id="14401" class="Symbol">.</a><a id="14402" href="#14116" class="Field">length</a> <a id="14409" href="../code/depth-comonads/DepthComonads.Relation.Binary.html#3314" class="Function Operator">‚â§?</a> <a id="14412" href="#14389" class="Bound">i</a>
  <a id="14416" class="Symbol">...</a> <a id="14420" class="Symbol">|</a> <a id="14422" href="../code/depth-comonads/DepthComonads.Dec.html#454" class="InductiveConstructor">no</a> <a id="14425" class="Symbol">_</a> <a id="14427" class="Symbol">=</a> <a id="14429" class="Bound">xs</a> <a id="14432" class="Symbol">.</a><a id="14433" href="#14099" class="Field">label</a>
  <a id="14441" href="#14323" class="Function">wf-index</a> <a id="14450" href="#14450" class="Bound">xs</a> <a id="14453" href="#14453" class="Bound">i</a> <a id="14455" class="Symbol">(</a><a id="14456" href="../code/depth-comonads/DepthComonads.WellFounded.html#189" class="InductiveConstructor">acc</a> <a id="14460" href="#14460" class="Bound">wf</a><a id="14462" class="Symbol">)</a> <a id="14464" class="Symbol">|</a> <a id="14466" href="../code/depth-comonads/DepthComonads.Dec.html#420" class="InductiveConstructor">yes</a> <a id="14470" class="Symbol">(</a><a id="14471" href="#14471" class="Bound">j</a> <a id="14473" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="14475" href="#14475" class="Bound">i‚â°xs‚Çó‚àôj</a><a id="14482" class="Symbol">)</a> <a id="14484" class="Symbol">=</a>
    <a id="14490" href="#14323" class="Function">wf-index</a> <a id="14499" class="Symbol">(</a><a id="14500" href="#14450" class="Bound">xs</a> <a id="14503" class="Symbol">.</a><a id="14504" href="#14159" class="Field">next</a><a id="14508" class="Symbol">)</a> <a id="14510" href="#14471" class="Bound">j</a> <a id="14512" class="Symbol">(</a><a id="14513" href="#14460" class="Bound">wf</a> <a id="14516" href="#14471" class="Bound">j</a> <a id="14518" class="Symbol">(</a><a id="14519" href="#14450" class="Bound">xs</a> <a id="14522" class="Symbol">.</a><a id="14523" href="#14116" class="Field">length</a> <a id="14530" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="14532" href="#14475" class="Bound">i‚â°xs‚Çó‚àôj</a> <a id="14540" href="Cubical.Foundations.Id.html#737" class="Function Operator">Õæ</a> <a id="14542" href="../code/depth-comonads/DepthComonads.Algebra.html#2733" class="Function">comm</a> <a id="14547" class="Symbol">_</a> <a id="14549" class="Symbol">_</a> <a id="14551" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="14553" href="#14450" class="Bound">xs</a> <a id="14556" class="Symbol">.</a><a id="14557" href="#14133" class="Field">length‚â¢Œµ</a><a id="14565" class="Symbol">))</a>

  <a id="14571" href="#14571" class="Function">‚Ñ±-Segments‚ÜíTraced</a> <a id="14589" class="Symbol">:</a> <a id="14591" href="#14011" class="Record">‚Ñ±-Segments</a> <a id="14602" href="#14288" class="Bound">E</a> <a id="14604" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="14606" class="Symbol">‚Üí</a> <a id="14608" href="#7636" class="Function">Traced</a> <a id="14615" href="#14288" class="Bound">E</a> <a id="14617" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
  <a id="14621" href="#14571" class="Function">‚Ñ±-Segments‚ÜíTraced</a> <a id="14639" href="#14639" class="Bound">xs</a> <a id="14642" href="#14642" class="Bound">i</a> <a id="14644" class="Symbol">=</a> <a id="14646" href="#14323" class="Function">wf-index</a> <a id="14655" href="#14639" class="Bound">xs</a> <a id="14658" href="#14642" class="Bound">i</a> <a id="14660" class="Symbol">(</a><a id="14661" href="#14293" class="Bound">wf</a> <a id="14664" href="#14642" class="Bound">i</a><a id="14665" class="Symbol">)</a>
</pre>
# Trying to build an isomorphism

So the `‚Ñ±-Segments` type is interesting, but it only really gives one side of the isomorphism.
There is no way to write a function `Traced E A ‚Üí ‚Ñ±-Segments E A`.

The problem is that there's no way to get the "next" segment from a function
`E ‚Üí A`.
We can find the label of the first segment, by applying the function to `Œµ`, but there's no real way to figure out the *size* of this segment.
We can change `Traced` little to *provide* this size, though.


<pre class="Agda"><a id="Ind"></a><a id="15166" href="#15166" class="Function">Ind</a> <a id="15170" class="Symbol">:</a> <a id="15172" class="Symbol">‚àÄ</a> <a id="15174" href="#15174" class="Bound">E</a> <a id="15176" class="Symbol">‚Üí</a> <a id="15178" class="Symbol">‚¶É</a> <a id="15180" href="#15180" class="Bound">_</a> <a id="15182" class="Symbol">:</a> <a id="15184" href="#12529" class="Record">Monus</a> <a id="15190" href="#15174" class="Bound">E</a> <a id="15192" class="Symbol">‚¶Ñ</a> <a id="15194" class="Symbol">‚Üí</a> <a id="15196" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="15201" class="Symbol">‚Üí</a> <a id="15203" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
<a id="15208" href="#15166" class="Function">Ind</a> <a id="15212" href="#15212" class="Bound">E</a> <a id="15214" href="#15214" class="Bound">A</a> <a id="15216" class="Symbol">=</a> <a id="15218" href="#15212" class="Bound">E</a> <a id="15220" class="Symbol">‚Üí</a> <a id="15222" href="#15214" class="Bound">A</a> <a id="15224" href="../code/depth-comonads/DepthComonads.Sigma.html#542" class="Function Operator">√ó</a> <a id="15226" href="../code/depth-comonads/DepthComonads.Sigma.html#407" class="Function">Œ£[</a> <a id="15229" href="#15229" class="Bound">length</a> <a id="15236" href="../code/depth-comonads/DepthComonads.Sigma.html#407" class="Function">‚¶Ç</a> <a id="15238" href="#15212" class="Bound">E</a> <a id="15240" href="../code/depth-comonads/DepthComonads.Sigma.html#407" class="Function">]</a> <a id="15242" href="../code/depth-comonads/DepthComonads.Sigma.html#407" class="Function">√ó</a> <a id="15244" class="Symbol">(</a><a id="15245" href="#15229" class="Bound">length</a> <a id="15252" href="../code/depth-comonads/DepthComonads.Path.html#561" class="Function Operator">‚â¢</a> <a id="15254" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a><a id="15255" class="Symbol">)</a>
</pre>
This new type will return a tuple consisting of the value indicated by the supplied index, along with the distance to the next segment.
For instance, on the example stream given in the diagram earlier, supplying an index `i` that is bigger than `a` but smaller than `a + b`, this function should return `y` along with some `j` such that `i + j ‚â° a + b`.
Diagrammatically:

<pre class="ascii-art">
‚ï∑‚á§i‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚á•‚ï∑‚á§j‚ïå‚ïå‚á•‚ï∑
‚î¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïà‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îâ
‚îÉx       ‚îÉy       ‚îÉz     ‚îâ
‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îâ
‚ïµ‚á§a‚ïå‚ïå‚ïå‚ïå‚ïå‚á•‚ïµ‚á§b‚ïå‚ïå‚ïå‚ïå‚ïå‚á•‚ïµ‚á§c‚ïå‚ïå‚ïå‚ïå‚îà
</pre>

This can be implemented in code like so:

<pre class="Agda"><a id="15841" class="Keyword">module</a> <a id="15848" href="#15848" class="Module">_</a> <a id="15850" class="Symbol">‚¶É</a> <a id="15852" href="#15852" class="Bound">_</a> <a id="15854" class="Symbol">:</a> <a id="15856" href="#12529" class="Record">Monus</a> <a id="15862" href="#7614" class="Generalizable">E</a> <a id="15864" class="Symbol">‚¶Ñ</a> <a id="15866" class="Keyword">where</a>
  <a id="15874" href="#15874" class="Function">wf-ind</a> <a id="15881" class="Symbol">:</a> <a id="15883" href="#14011" class="Record">‚Ñ±-Segments</a> <a id="15894" href="#15862" class="Bound">E</a> <a id="15896" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="15898" class="Symbol">‚Üí</a> <a id="15900" class="Symbol">(</a><a id="15901" href="#15901" class="Bound">i</a> <a id="15903" class="Symbol">:</a> <a id="15905" href="#15862" class="Bound">E</a><a id="15906" class="Symbol">)</a> <a id="15908" class="Symbol">‚Üí</a> <a id="15910" href="../code/depth-comonads/DepthComonads.WellFounded.html#113" class="Datatype">Acc</a> <a id="15914" href="../code/depth-comonads/DepthComonads.Algebra.Monus.html#2522" class="Function Operator">_‚â∫_</a> <a id="15918" href="#15901" class="Bound">i</a> <a id="15920" class="Symbol">‚Üí</a> <a id="15922" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="15924" href="../code/depth-comonads/DepthComonads.Sigma.html#542" class="Function Operator">√ó</a> <a id="15926" href="../code/depth-comonads/DepthComonads.Sigma.html#260" class="Function">‚àÉ</a> <a id="15928" href="#15928" class="Bound">length</a> <a id="15935" href="../code/depth-comonads/DepthComonads.Sigma.html#260" class="Function">√ó</a> <a id="15937" class="Symbol">(</a><a id="15938" href="#15928" class="Bound">length</a> <a id="15945" href="../code/depth-comonads/DepthComonads.Path.html#561" class="Function Operator">‚â¢</a> <a id="15947" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a><a id="15948" class="Symbol">)</a>
  <a id="15952" href="#15874" class="Function">wf-ind</a> <a id="15959" href="#15959" class="Bound">xs</a> <a id="15962" href="#15962" class="Bound">i</a> <a id="15964" class="Symbol">_</a> <a id="15966" class="Keyword">with</a> <a id="15971" href="#15959" class="Bound">xs</a> <a id="15974" class="Symbol">.</a><a id="15975" href="#14116" class="Field">length</a> <a id="15982" href="../code/depth-comonads/DepthComonads.Relation.Binary.html#3314" class="Function Operator">‚â§?</a> <a id="15985" href="#15962" class="Bound">i</a>
  <a id="15989" class="Symbol">...</a> <a id="15993" class="Symbol">|</a> <a id="15995" href="../code/depth-comonads/DepthComonads.Dec.html#454" class="InductiveConstructor">no</a> <a id="15998" href="#15998" class="Bound">xs‚Çó‚â∞i</a> <a id="16004" class="Symbol">=</a>
    <a id="16010" class="Keyword">let</a> <a id="16014" href="#16014" class="Bound">j</a> <a id="16016" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="16018" class="Symbol">_</a> <a id="16020" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="16022" href="#16022" class="Bound">j‚â¢Œµ</a> <a id="16026" class="Symbol">=</a> <a id="16028" href="../code/depth-comonads/DepthComonads.Algebra.Monus.html#4426" class="Function">&lt;‚áí‚â∫</a> <a id="16032" class="Bound">i</a> <a id="16034" class="Symbol">(</a><a id="16035" class="Bound">xs</a> <a id="16038" class="Symbol">.</a><a id="16039" href="#14116" class="Field">length</a><a id="16045" class="Symbol">)</a> <a id="16047" href="#15998" class="Bound">xs‚Çó‚â∞i</a>
    <a id="16057" class="Keyword">in</a> <a id="16060" class="Bound">xs</a> <a id="16063" class="Symbol">.</a><a id="16064" href="#14099" class="Field">label</a> <a id="16070" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="16072" href="#16014" class="Bound">j</a> <a id="16074" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="16076" href="#16022" class="Bound">j‚â¢Œµ</a>
  <a id="16082" href="#15874" class="Function">wf-ind</a> <a id="16089" href="#16089" class="Bound">xs</a> <a id="16092" href="#16092" class="Bound">i</a> <a id="16094" class="Symbol">(</a><a id="16095" href="../code/depth-comonads/DepthComonads.WellFounded.html#189" class="InductiveConstructor">acc</a> <a id="16099" href="#16099" class="Bound">wf</a><a id="16101" class="Symbol">)</a> <a id="16103" class="Symbol">|</a> <a id="16105" href="../code/depth-comonads/DepthComonads.Dec.html#420" class="InductiveConstructor">yes</a> <a id="16109" class="Symbol">(</a><a id="16110" href="#16110" class="Bound">j</a> <a id="16112" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="16114" href="#16114" class="Bound">i‚â°xs‚Çó‚àôj</a><a id="16121" class="Symbol">)</a> <a id="16123" class="Symbol">=</a>
    <a id="16129" href="#15874" class="Function">wf-ind</a> <a id="16136" class="Symbol">(</a><a id="16137" href="#16089" class="Bound">xs</a> <a id="16140" class="Symbol">.</a><a id="16141" href="#14159" class="Field">next</a><a id="16145" class="Symbol">)</a> <a id="16147" href="#16110" class="Bound">j</a> <a id="16149" class="Symbol">(</a><a id="16150" href="#16099" class="Bound">wf</a> <a id="16153" href="#16110" class="Bound">j</a> <a id="16155" class="Symbol">(</a><a id="16156" href="#16089" class="Bound">xs</a> <a id="16159" class="Symbol">.</a><a id="16160" href="#14116" class="Field">length</a> <a id="16167" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="16169" href="#16114" class="Bound">i‚â°xs‚Çó‚àôj</a> <a id="16177" href="Cubical.Foundations.Id.html#737" class="Function Operator">Õæ</a> <a id="16179" href="../code/depth-comonads/DepthComonads.Algebra.html#2733" class="Function">comm</a> <a id="16184" class="Symbol">_</a> <a id="16186" class="Symbol">_</a> <a id="16188" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="16190" href="#16089" class="Bound">xs</a> <a id="16193" class="Symbol">.</a><a id="16194" href="#14133" class="Field">length‚â¢Œµ</a><a id="16202" class="Symbol">))</a>

  <a id="16208" href="#16208" class="Function">‚Ñ±-Segments‚ÜíInd</a> <a id="16223" class="Symbol">:</a> <a id="16225" href="../code/depth-comonads/DepthComonads.WellFounded.html#230" class="Function">WellFounded</a> <a id="16237" href="../code/depth-comonads/DepthComonads.Algebra.Monus.html#2522" class="Function Operator">_‚â∫_</a> <a id="16241" class="Symbol">‚Üí</a> <a id="16243" href="#14011" class="Record">‚Ñ±-Segments</a> <a id="16254" href="#15862" class="Bound">E</a> <a id="16256" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="16258" class="Symbol">‚Üí</a> <a id="16260" href="#15166" class="Function">Ind</a> <a id="16264" href="#15862" class="Bound">E</a> <a id="16266" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
  <a id="16270" href="#16208" class="Function">‚Ñ±-Segments‚ÜíInd</a> <a id="16285" href="#16285" class="Bound">wf</a> <a id="16288" href="#16288" class="Bound">xs</a> <a id="16291" href="#16291" class="Bound">i</a> <a id="16293" class="Symbol">=</a> <a id="16295" href="#15874" class="Function">wf-ind</a> <a id="16302" href="#16288" class="Bound">xs</a> <a id="16305" href="#16291" class="Bound">i</a> <a id="16307" class="Symbol">(</a><a id="16308" href="#16285" class="Bound">wf</a> <a id="16311" href="#16291" class="Bound">i</a><a id="16312" class="Symbol">)</a>
</pre>
Again, if the monus has finite descending chains, this function is terminating.
And the nice thing about this is that it's possible to write a function in the other direction:

<pre class="Agda"><a id="Ind‚Üí‚Ñ±-Segments"></a><a id="16500" href="#16500" class="Function">Ind‚Üí‚Ñ±-Segments</a> <a id="16515" class="Symbol">:</a> <a id="16517" class="Symbol">‚¶É</a> <a id="16519" href="#16519" class="Bound">_</a> <a id="16521" class="Symbol">:</a> <a id="16523" href="#12529" class="Record">Monus</a> <a id="16529" href="#7614" class="Generalizable">E</a> <a id="16531" class="Symbol">‚¶Ñ</a> <a id="16533" class="Symbol">‚Üí</a> <a id="16535" href="#15166" class="Function">Ind</a> <a id="16539" href="#7614" class="Generalizable">E</a> <a id="16541" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="16543" class="Symbol">‚Üí</a> <a id="16545" href="#14011" class="Record">‚Ñ±-Segments</a> <a id="16556" href="#7614" class="Generalizable">E</a> <a id="16558" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
<a id="16560" href="#16500" class="Function">Ind‚Üí‚Ñ±-Segments</a> <a id="16575" href="#16575" class="Bound">ind</a> <a id="16579" class="Symbol">=</a>
  <a id="16583" class="Keyword">let</a> <a id="16587" href="#16587" class="Bound">x</a> <a id="16589" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="16591" href="#16591" class="Bound">s</a> <a id="16593" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="16595" href="#16595" class="Bound">s‚â¢Œµ</a> <a id="16599" class="Symbol">=</a> <a id="16601" href="#16575" class="Bound">ind</a> <a id="16605" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a>
  <a id="16609" class="Keyword">in</a> <a id="16612" class="Symbol">Œª</a> <a id="16614" class="Keyword">where</a> <a id="16620" class="Symbol">.</a><a id="16621" href="#14099" class="Field">label</a>    <a id="16630" class="Symbol">‚Üí</a> <a id="16632" href="#16587" class="Bound">x</a>
             <a id="16647" class="Symbol">.</a><a id="16648" href="#14116" class="Field">length</a>   <a id="16657" class="Symbol">‚Üí</a> <a id="16659" href="#16591" class="Bound">s</a>
             <a id="16674" class="Symbol">.</a><a id="16675" href="#14133" class="Field">length‚â¢Œµ</a> <a id="16684" class="Symbol">‚Üí</a> <a id="16686" href="#16595" class="Bound">s‚â¢Œµ</a>
             <a id="16703" class="Symbol">.</a><a id="16704" href="#14159" class="Field">next</a>     <a id="16713" class="Symbol">‚Üí</a> <a id="16715" href="#16500" class="Function">Ind‚Üí‚Ñ±-Segments</a> <a id="16730" class="Symbol">(</a><a id="16731" href="#16575" class="Bound">ind</a> <a id="16735" href="../code/depth-comonads/DepthComonads.Function.html#125" class="Function Operator">‚àò</a> <a id="16737" class="Symbol">(</a><a id="16738" href="#16591" class="Bound">s</a> <a id="16740" href="../code/depth-comonads/DepthComonads.Algebra.html#1530" class="Field Operator">‚àô_</a><a id="16742" class="Symbol">))</a>
</pre>
The problem here is that this isomorphism is only half correct.
We can prove that converting to `Ind` and back is the identity, but not the other direction.
There are too many functions in `Ind`.

Nonetheless, it's still interesting!

# State Comonad

There is a comonad on state [@waern_made_2018; @kmett_state_2018] that is different from store.
Notice that above the `Ind` type has the same type (almost) as `State E A`.

This is interesting in two ways: first, it gives some concrete, spatial intuition for what's going on with the state comonad.

Second, it gives a kind of interesting *monad* instance on the stream.
If we apply the `Ind‚Üí‚Ñ±-Segments` function to the implementation of `join` on state, we *should* get a `join` on `‚Ñ±-Segments`.
And we do!

First, we need to redefine `Ind` to the following:

<pre class="Agda"><a id="ùíú-Ind"></a><a id="17567" href="#17567" class="Function">ùíú-Ind</a> <a id="17573" class="Symbol">:</a> <a id="17575" class="Symbol">‚àÄ</a> <a id="17577" href="#17577" class="Bound">E</a> <a id="17579" class="Symbol">‚Üí</a> <a id="17581" class="Symbol">‚¶É</a> <a id="17583" href="#17583" class="Bound">_</a> <a id="17585" class="Symbol">:</a> <a id="17587" href="#12529" class="Record">Monus</a> <a id="17593" href="#17577" class="Bound">E</a> <a id="17595" class="Symbol">‚¶Ñ</a> <a id="17597" class="Symbol">‚Üí</a> <a id="17599" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="17604" class="Symbol">‚Üí</a> <a id="17606" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
<a id="17611" href="#17567" class="Function">ùíú-Ind</a> <a id="17617" href="#17617" class="Bound">E</a> <a id="17619" href="#17619" class="Bound">A</a> <a id="17621" class="Symbol">=</a> <a id="17623" class="Symbol">(</a><a id="17624" href="#17624" class="Bound">i</a> <a id="17626" class="Symbol">:</a> <a id="17628" href="#17617" class="Bound">E</a><a id="17629" class="Symbol">)</a> <a id="17631" class="Symbol">‚Üí</a> <a id="17633" href="#17619" class="Bound">A</a> <a id="17635" href="../code/depth-comonads/DepthComonads.Sigma.html#542" class="Function Operator">√ó</a> <a id="17637" href="../code/depth-comonads/DepthComonads.Sigma.html#407" class="Function">Œ£[</a> <a id="17640" href="#17640" class="Bound">length</a> <a id="17647" href="../code/depth-comonads/DepthComonads.Sigma.html#407" class="Function">‚¶Ç</a> <a id="17649" href="#17617" class="Bound">E</a> <a id="17651" href="../code/depth-comonads/DepthComonads.Sigma.html#407" class="Function">]</a> <a id="17653" href="../code/depth-comonads/DepthComonads.Sigma.html#407" class="Function">√ó</a> <a id="17655" class="Symbol">(</a><a id="17656" href="#17624" class="Bound">i</a> <a id="17658" href="../code/depth-comonads/DepthComonads.Algebra.Monus.html#2522" class="Function Operator">‚â∫</a> <a id="17660" href="#17640" class="Bound">length</a><a id="17666" class="Symbol">)</a>
</pre>
This is actually isomorphic to the previous definition, but we return the absolute value of the next segment, rather than the distance to the next segment.

<pre class="Agda"><a id="ùíú-iso"></a><a id="17834" href="#17834" class="Function">ùíú-iso</a> <a id="17840" class="Symbol">:</a> <a id="17842" class="Symbol">‚¶É</a> <a id="17844" href="#17844" class="Bound">_</a> <a id="17846" class="Symbol">:</a> <a id="17848" href="#12529" class="Record">Monus</a> <a id="17854" href="#7614" class="Generalizable">E</a> <a id="17856" class="Symbol">‚¶Ñ</a> <a id="17858" class="Symbol">‚Üí</a> <a id="17860" href="#17567" class="Function">ùíú-Ind</a> <a id="17866" href="#7614" class="Generalizable">E</a> <a id="17868" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="17870" href="../code/depth-comonads/DepthComonads.Function.Isomorphism.html#308" class="Function Operator">‚áî</a> <a id="17872" href="#15166" class="Function">Ind</a> <a id="17876" href="#7614" class="Generalizable">E</a> <a id="17878" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
<a id="17880" href="#17834" class="Function">ùíú-iso</a> <a id="17886" class="Symbol">.</a><a id="17887" href="Cubical.Foundations.Isomorphism.html#882" class="Field">fun</a> <a id="17891" href="#17891" class="Bound">xs</a> <a id="17894" href="#17894" class="Bound">i</a> <a id="17896" class="Symbol">=</a>
  <a id="17900" class="Keyword">let</a> <a id="17904" href="#17904" class="Bound">x</a> <a id="17906" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="17908" href="#17908" class="Bound">s</a> <a id="17910" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="17912" href="#17912" class="Bound">k</a> <a id="17914" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="17916" href="#17916" class="Bound">s‚â°i‚àôk</a> <a id="17922" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="17924" href="#17924" class="Bound">k‚â¢Œµ</a> <a id="17928" class="Symbol">=</a> <a id="17930" href="#17891" class="Bound">xs</a> <a id="17933" href="#17894" class="Bound">i</a>
  <a id="17937" class="Keyword">in</a>  <a id="17941" href="#17904" class="Bound">x</a> <a id="17943" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="17945" href="#17912" class="Bound">k</a> <a id="17947" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="17949" href="#17924" class="Bound">k‚â¢Œµ</a>
<a id="17953" href="#17834" class="Function">ùíú-iso</a> <a id="17959" class="Symbol">.</a><a id="17960" href="Cubical.Foundations.Isomorphism.html#898" class="Field">inv</a> <a id="17964" href="#17964" class="Bound">xs</a> <a id="17967" href="#17967" class="Bound">i</a> <a id="17969" class="Symbol">=</a>
  <a id="17973" class="Keyword">let</a> <a id="17977" href="#17977" class="Bound">x</a> <a id="17979" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="17981" href="#17981" class="Bound">s</a> <a id="17983" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="17985" href="#17985" class="Bound">s‚â¢Œµ</a> <a id="17989" class="Symbol">=</a> <a id="17991" href="#17964" class="Bound">xs</a> <a id="17994" href="#17967" class="Bound">i</a>
  <a id="17998" class="Keyword">in</a>  <a id="18002" href="#17977" class="Bound">x</a> <a id="18004" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18006" href="#17967" class="Bound">i</a> <a id="18008" href="../code/depth-comonads/DepthComonads.Algebra.html#1530" class="Field Operator">‚àô</a> <a id="18010" href="#17981" class="Bound">s</a> <a id="18012" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18014" href="#17981" class="Bound">s</a> <a id="18016" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18018" href="Cubical.Foundations.Id.html#560" class="Function">refl</a> <a id="18023" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18025" href="#17985" class="Bound">s‚â¢Œµ</a>
<a id="18029" href="#17834" class="Function">ùíú-iso</a> <a id="18035" class="Symbol">.</a><a id="18036" href="Cubical.Foundations.Isomorphism.html#914" class="Field">rightInv</a> <a id="18045" class="Symbol">_</a> <a id="18047" class="Symbol">=</a> <a id="18049" href="Cubical.Foundations.Id.html#560" class="Function">refl</a>
<a id="18054" href="#17834" class="Function">ùíú-iso</a> <a id="18060" class="Symbol">.</a><a id="18061" href="Cubical.Foundations.Isomorphism.html#945" class="Field">leftInv</a>  <a id="18070" href="#18070" class="Bound">xs</a> <a id="18073" href="#18073" class="Bound">p</a> <a id="18075" href="#18075" class="Bound">i</a> <a id="18077" class="Symbol">=</a> 
  <a id="18082" class="Keyword">let</a> <a id="18086" href="#18086" class="Bound">x</a> <a id="18088" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18090" href="#18090" class="Bound">s</a>           <a id="18102" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18104" href="#18104" class="Bound">k</a> <a id="18106" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18108" href="#18108" class="Bound">s‚â°i‚àôk</a>                   <a id="18132" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18134" href="#18134" class="Bound">k‚â¢Œµ</a> <a id="18138" class="Symbol">=</a> <a id="18140" href="#18070" class="Bound">xs</a> <a id="18143" href="#18075" class="Bound">i</a>
  <a id="18147" class="Keyword">in</a>  <a id="18151" href="#18086" class="Bound">x</a> <a id="18153" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18155" href="#18108" class="Bound">s‚â°i‚àôk</a> <a id="18161" class="Symbol">(</a><a id="18162" href="Cubical.Core.Primitives.html#539" class="Primitive Operator">~</a> <a id="18164" href="#18073" class="Bound">p</a><a id="18165" class="Symbol">)</a> <a id="18167" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18169" href="#18104" class="Bound">k</a> <a id="18171" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18173" class="Symbol">(Œª</a> <a id="18176" href="#18176" class="Bound">q</a> <a id="18178" class="Symbol">‚Üí</a> <a id="18180" href="#18108" class="Bound">s‚â°i‚àôk</a> <a id="18186" class="Symbol">(</a><a id="18187" href="Cubical.Core.Primitives.html#539" class="Primitive Operator">~</a> <a id="18189" href="#18073" class="Bound">p</a> <a id="18191" href="Cubical.Core.Primitives.html#490" class="Primitive Operator">‚à®</a> <a id="18193" href="#18176" class="Bound">q</a><a id="18194" class="Symbol">))</a> <a id="18197" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18199" href="#18134" class="Bound">k‚â¢Œµ</a>
</pre>
The implemention of `join` on this type is the following:

<pre class="Agda"><a id="ùíú-join"></a><a id="18271" href="#18271" class="Function">ùíú-join</a> <a id="18278" class="Symbol">:</a> <a id="18280" class="Symbol">‚¶É</a> <a id="18282" href="#18282" class="Bound">_</a> <a id="18284" class="Symbol">:</a> <a id="18286" href="#12529" class="Record">Monus</a> <a id="18292" href="#7614" class="Generalizable">E</a> <a id="18294" class="Symbol">‚¶Ñ</a> <a id="18296" class="Symbol">‚Üí</a> <a id="18298" href="#17567" class="Function">ùíú-Ind</a> <a id="18304" href="#7614" class="Generalizable">E</a> <a id="18306" class="Symbol">(</a><a id="18307" href="#17567" class="Function">ùíú-Ind</a> <a id="18313" href="#7614" class="Generalizable">E</a> <a id="18315" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a><a id="18316" class="Symbol">)</a> <a id="18318" class="Symbol">‚Üí</a> <a id="18320" href="#17567" class="Function">ùíú-Ind</a> <a id="18326" href="#7614" class="Generalizable">E</a> <a id="18328" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
<a id="18330" href="#18271" class="Function">ùíú-join</a> <a id="18337" href="#18337" class="Bound">xs</a> <a id="18340" href="#18340" class="Bound">i</a> <a id="18342" class="Symbol">=</a>
  <a id="18346" class="Keyword">let</a> <a id="18350" href="#18350" class="Bound">x</a> <a id="18352" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18354" href="#18354" class="Bound">j</a> <a id="18356" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18358" href="#18358" class="Bound">i&lt;j</a> <a id="18362" class="Symbol">=</a> <a id="18364" href="#18337" class="Bound">xs</a> <a id="18367" href="#18340" class="Bound">i</a>
      <a id="18375" href="#18375" class="Bound">y</a> <a id="18377" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18379" href="#18379" class="Bound">k</a> <a id="18381" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18383" href="#18383" class="Bound">k&lt;j</a> <a id="18387" class="Symbol">=</a> <a id="18389" href="#18350" class="Bound">x</a> <a id="18391" href="#18354" class="Bound">j</a>
  <a id="18395" class="Keyword">in</a>  <a id="18399" href="#18375" class="Bound">y</a> <a id="18401" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18403" href="#18379" class="Bound">k</a> <a id="18405" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="18407" href="../code/depth-comonads/DepthComonads.Algebra.Monus.html#5397" class="Function">‚â∫-trans</a> <a id="18415" href="#18358" class="Bound">i&lt;j</a> <a id="18419" href="#18383" class="Bound">k&lt;j</a>
</pre>
This is the same definition of `join` as for `State`, modulo the `<` fiddling.

On a stream, this operation corresponds to taking a stream of streams and collapsing it to a single stream.
It does this by taking a prefix of each internal stream equal in size to the segment of the outer entry.
Diagrammatically:

<pre class="ascii-art">
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îâ
‚îÉxs        ‚îÉys    ‚îÉzs    ‚îâ
‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îâ
‚ïµ‚á§a‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚á•‚ïµ‚á§b‚ïå‚ïå‚ïå‚á•‚ïµ‚á§c‚ïå‚ïå‚ïå‚ïå‚îà
          ‚ï±        ‚ï≤
         ‚ï±          ‚ï≤
        ‚ï±            ‚ï≤
       ‚ï±              ‚ï≤
      ‚ï±                ‚ï≤
     ‚ï∑‚á§b‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚á•‚ï∑
     ‚î¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚î∑‚îâ
ys = ‚îÉx ∏     ‚îÉy ∏    ‚îÉz ∏  ‚îâ
     ‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îâ
     ‚ïµ‚á§a ∏‚ïå‚ïå‚ïå‚á•‚ïµ‚á§b ∏‚ïå‚ïå‚á•‚ïµ‚á§c ∏‚ïå‚îà
</pre>

Here we start with a stream consisting of the streams `xs`, `ys`, and `zs`, followed by some other streams.
Zooming in on `ys`, we see that it is in a segment of length `b`, and consists of three values `x ∏`, `y ∏`, and `z ∏`, with segment lengths `a ∏`, `b ∏`, and `c ∏`, respectively.

Calling `join` on this stream will give us the following stream:

<pre class="ascii-art">
‚îè‚îÅ‚îâ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îâ
‚îÉ ‚îâ ‚îÉx ∏  ‚îÉy ∏  ‚îÉz ∏   ‚îÉ    ‚îâ
‚î°‚îÅ‚îâ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îâ
‚îÇ   ‚îÇ‚á§a ∏‚á•‚ïµ‚á§b ∏‚á•‚ïµ‚á§‚ïå‚ïå‚îà‚á•‚îÇ
‚ïµ‚á§a‚á•‚ïµ‚á§b‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚ïå‚á•‚ïµ‚á§c‚ïå‚ïå‚îà
</pre>

Again, we're focusing on the `ys` section here, which occupies the segment from `a` to `a ‚àô b`.
After `join`, this segment is occupied by three elements, `x ∏`, `y ∏`, and `z ∏`.

Notice that this isn't quite the normal `join` on streams.
That `join` takes a stream of streams, and turns the `i`th entry into the `i`th entry in the underlying stream.
It's a diagonalisation, in other words.

This one is kind of similar, but it takes chunks of the outer stream.

# Theory

All of this so far is very hand-wavy.
We have an almost isomorphism (a split surjection, to be precise), but not much in the way of concrete theoretical insights, just some vague gesturing towards spatial metaphors and so on.

Thankfully, there are two seperate areas of more serious research that seem related to the stuff I've talked about here.
The first is update monads and directed containers, and the second is graded comonads.
I think I understand graded comonads and the related work better out of the two, but update monads and directed containers seems more closely related to what I'm doing here.

# Update Monads and Directed Containers

There are a few papers on this topic:
@ahman_when_2012, @ahman_distributive_2013 [@ahman_update_2014; @ahman_directed_2016].

The first of these, "When Is a Container a Comonad?" constructs, as the title suggests, a class for containers which are comonads in a standard way.

Here's the definition of a container:

<pre class="Agda"><a id="Container"></a><a id="21080" href="#21080" class="Function">Container</a> <a id="21090" class="Symbol">:</a> <a id="21092" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type‚ÇÅ</a>
<a id="21098" href="#21080" class="Function">Container</a> <a id="21108" class="Symbol">=</a> <a id="21110" href="../code/depth-comonads/DepthComonads.Sigma.html#407" class="Function">Œ£[</a> <a id="21113" href="#21113" class="Bound">Shape</a> <a id="21119" href="../code/depth-comonads/DepthComonads.Sigma.html#407" class="Function">‚¶Ç</a> <a id="21121" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="21126" href="../code/depth-comonads/DepthComonads.Sigma.html#407" class="Function">]</a> <a id="21128" href="../code/depth-comonads/DepthComonads.Sigma.html#407" class="Function">√ó</a> <a id="21130" class="Symbol">(</a><a id="21131" href="#21113" class="Bound">Shape</a> <a id="21137" class="Symbol">‚Üí</a> <a id="21139" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="21143" class="Symbol">)</a>

<a id="‚ü¶_‚üß"></a><a id="21146" href="#21146" class="Function Operator">‚ü¶_‚üß</a> <a id="21150" class="Symbol">:</a> <a id="21152" href="#21080" class="Function">Container</a> <a id="21162" class="Symbol">‚Üí</a> <a id="21164" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="21169" class="Symbol">‚Üí</a> <a id="21171" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
<a id="21176" href="#21146" class="Function Operator">‚ü¶</a> <a id="21178" href="#21178" class="Bound">S</a> <a id="21180" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="21182" href="#21182" class="Bound">P</a> <a id="21184" href="#21146" class="Function Operator">‚üß</a> <a id="21186" href="#21186" class="Bound">X</a> <a id="21188" class="Symbol">=</a> <a id="21190" href="../code/depth-comonads/DepthComonads.Sigma.html#407" class="Function">Œ£[</a> <a id="21193" href="#21193" class="Bound">s</a> <a id="21195" href="../code/depth-comonads/DepthComonads.Sigma.html#407" class="Function">‚¶Ç</a> <a id="21197" href="#21178" class="Bound">S</a> <a id="21199" href="../code/depth-comonads/DepthComonads.Sigma.html#407" class="Function">]</a> <a id="21201" href="../code/depth-comonads/DepthComonads.Sigma.html#407" class="Function">√ó</a> <a id="21203" class="Symbol">(</a><a id="21204" href="#21182" class="Bound">P</a> <a id="21206" href="#21193" class="Bound">s</a> <a id="21208" class="Symbol">‚Üí</a> <a id="21210" href="#21186" class="Bound">X</a><a id="21211" class="Symbol">)</a>
</pre>
Containers are a generic way to describe a class of well-behaved functors.
Any container is a pair of a shape and position.
Lists, for instance, are containers, where their shape is described by the natural numbers (the shape here is the length of the list).
The positions in such a list are the numbers smaller than the length, in dependently-typed programming we usually use the `Fin` type for this:

<pre class="Agda"><a id="Fin"></a><a id="21625" href="#21625" class="Function">Fin</a> <a id="21629" class="Symbol">:</a> <a id="21631" href="../code/depth-comonads/Agda.Builtin.Nat.html#192" class="Datatype">‚Ñï</a> <a id="21633" class="Symbol">‚Üí</a> <a id="21635" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
<a id="21640" href="#21625" class="Function">Fin</a> <a id="21644" href="#21644" class="Bound">n</a> <a id="21646" class="Symbol">=</a> <a id="21648" href="../code/depth-comonads/DepthComonads.Sigma.html#260" class="Function">‚àÉ</a> <a id="21650" href="#21650" class="Bound">m</a> <a id="21652" href="../code/depth-comonads/DepthComonads.Sigma.html#260" class="Function">√ó</a> <a id="21654" class="Symbol">(</a><a id="21655" href="#21650" class="Bound">m</a> <a id="21657" href="../code/depth-comonads/DepthComonads.Nat.html#220" class="Function Operator">&lt;‚Ñï</a> <a id="21660" href="#21644" class="Bound">n</a><a id="21661" class="Symbol">)</a>
</pre>
The container version of lists, then, is the following:

<pre class="Agda"><a id="‚Ñíùíæùìàùìâ"></a><a id="21729" href="#21729" class="Function">‚Ñíùíæùìàùìâ</a> <a id="21734" class="Symbol">:</a> <a id="21736" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="21741" class="Symbol">‚Üí</a> <a id="21743" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
<a id="21748" href="#21729" class="Function">‚Ñíùíæùìàùìâ</a> <a id="21753" class="Symbol">=</a> <a id="21755" href="#21146" class="Function Operator">‚ü¶</a> <a id="21757" href="../code/depth-comonads/Agda.Builtin.Nat.html#192" class="Datatype">‚Ñï</a> <a id="21759" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="21761" href="#21625" class="Function">Fin</a> <a id="21765" href="#21146" class="Function Operator">‚üß</a>
</pre>
Here's the same list represented in the standard way, and as a container:

<div class="row">
<div class="column">
<pre class="Agda"><a id="someBools"></a><a id="21890" href="#21890" class="Function">someBools</a> <a id="21900" class="Symbol">:</a> <a id="21902" href="../code/depth-comonads/Agda.Builtin.List.html#148" class="Datatype">List</a> <a id="21907" href="../code/depth-comonads/Agda.Builtin.Bool.html#163" class="Datatype">Bool</a>
<a id="21912" href="#21890" class="Function">someBools</a> <a id="21922" class="Symbol">=</a> <a id="21924" href="../code/depth-comonads/Agda.Builtin.Bool.html#188" class="InductiveConstructor">true</a> <a id="21929" href="../code/depth-comonads/Agda.Builtin.List.html#200" class="InductiveConstructor Operator">‚à∑</a> <a id="21931" href="../code/depth-comonads/Agda.Builtin.Bool.html#188" class="InductiveConstructor">true</a> <a id="21936" href="../code/depth-comonads/Agda.Builtin.List.html#200" class="InductiveConstructor Operator">‚à∑</a> <a id="21938" href="../code/depth-comonads/Agda.Builtin.Bool.html#182" class="InductiveConstructor">false</a> <a id="21944" href="../code/depth-comonads/Agda.Builtin.List.html#200" class="InductiveConstructor Operator">‚à∑</a> <a id="21946" href="../code/depth-comonads/Agda.Builtin.Bool.html#188" class="InductiveConstructor">true</a> <a id="21951" href="../code/depth-comonads/Agda.Builtin.List.html#200" class="InductiveConstructor Operator">‚à∑</a> <a id="21953" href="../code/depth-comonads/Agda.Builtin.List.html#185" class="InductiveConstructor">[]</a>
</pre></div>
<div class="column">
<pre class="Agda"><a id="someBools‚Ä≤"></a><a id="21992" href="#21992" class="Function">someBools‚Ä≤</a> <a id="22003" class="Symbol">:</a> <a id="22005" href="#21729" class="Function">‚Ñíùíæùìàùìâ</a> <a id="22010" href="../code/depth-comonads/Agda.Builtin.Bool.html#163" class="Datatype">Bool</a>
<a id="22015" href="#21992" class="Function">someBools‚Ä≤</a> <a id="22026" class="Symbol">.</a><a id="22027" href="../code/depth-comonads/Agda.Builtin.Sigma.html#252" class="Field">fst</a> <a id="22031" class="Symbol">=</a> <a id="22033" class="Number">4</a>
<a id="22035" href="#21992" class="Function">someBools‚Ä≤</a> <a id="22046" class="Symbol">.</a><a id="22047" href="../code/depth-comonads/Agda.Builtin.Sigma.html#264" class="Field">snd</a> <a id="22051" class="Symbol">(</a><a id="22052" class="Number">0</a> <a id="22054" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="22056" class="Symbol">_)</a> <a id="22059" class="Symbol">=</a> <a id="22061" href="../code/depth-comonads/Agda.Builtin.Bool.html#188" class="InductiveConstructor">true</a>
<a id="22066" href="#21992" class="Function">someBools‚Ä≤</a> <a id="22077" class="Symbol">.</a><a id="22078" href="../code/depth-comonads/Agda.Builtin.Sigma.html#264" class="Field">snd</a> <a id="22082" class="Symbol">(</a><a id="22083" class="Number">1</a> <a id="22085" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="22087" class="Symbol">_)</a> <a id="22090" class="Symbol">=</a> <a id="22092" href="../code/depth-comonads/Agda.Builtin.Bool.html#188" class="InductiveConstructor">true</a>
<a id="22097" href="#21992" class="Function">someBools‚Ä≤</a> <a id="22108" class="Symbol">.</a><a id="22109" href="../code/depth-comonads/Agda.Builtin.Sigma.html#264" class="Field">snd</a> <a id="22113" class="Symbol">(</a><a id="22114" class="Number">2</a> <a id="22116" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="22118" class="Symbol">_)</a> <a id="22121" class="Symbol">=</a> <a id="22123" href="../code/depth-comonads/Agda.Builtin.Bool.html#182" class="InductiveConstructor">false</a>
<a id="22129" href="#21992" class="Function">someBools‚Ä≤</a> <a id="22140" class="Symbol">.</a><a id="22141" href="../code/depth-comonads/Agda.Builtin.Sigma.html#264" class="Field">snd</a> <a id="22145" class="Symbol">(</a><a id="22146" class="Number">3</a> <a id="22148" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="22150" class="Symbol">_)</a> <a id="22153" class="Symbol">=</a> <a id="22155" href="../code/depth-comonads/Agda.Builtin.Bool.html#188" class="InductiveConstructor">true</a>
</pre></div>
</div>

The benefit of using containers is that it gives a standard, generic, and composable way to construct functors that have some nice properties (like strict positivity).
They're pretty annoying to use in practice, though, which is a shame.

Directed containers are container that have three extra operations.

* A `tail`-like operation, where a position can be converted into the shape of containers that the suffic from that position.
* A `head`-like operation, where you can always return the root position.
* A `+`-like operation, where you take a position on some tail and translate it into a position on the original container, by adding it.

As the paper observes, these are very similar to a "dependently-typed" version of the monoid methods.
This seems to me to be very similar to the indexing stuff we were doing earlier on.

The real interesting part is in the paper "Updated Monads: Cointerpreting Directed Containers" [@ahman_update_2014].
This paper presents a variant on state monads, called "update monads".

These are monads that use a monoid action:

<pre class="Agda"><a id="23249" class="Keyword">record</a> <a id="RightAction"></a><a id="23256" href="#23256" class="Record">RightAction</a> <a id="23268" class="Symbol">(</a><a id="23269" href="#23269" class="Bound">ùëÉ</a> <a id="23271" class="Symbol">:</a> <a id="23273" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="23277" class="Symbol">)</a> <a id="23279" class="Symbol">(</a><a id="23280" href="#23280" class="Bound">ùëÜ</a> <a id="23282" class="Symbol">:</a> <a id="23284" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="23288" class="Symbol">)</a> <a id="23290" class="Symbol">:</a> <a id="23292" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="23297" class="Keyword">where</a>
  <a id="23305" class="Keyword">infixl</a> <a id="23312" class="Number">5</a> <a id="23314" href="#23359" class="Field Operator">_‚Üì_</a>
  <a id="23320" class="Keyword">field</a>
    <a id="23330" class="Symbol">‚¶É</a> <a id="RightAction.monoid‚ü®ùëÉ‚ü©"></a><a id="23332" href="#23332" class="Field">monoid‚ü®ùëÉ‚ü©</a> <a id="23342" class="Symbol">‚¶Ñ</a> <a id="23344" class="Symbol">:</a> <a id="23346" href="../code/depth-comonads/DepthComonads.Algebra.html#1492" class="Record">Monoid</a> <a id="23353" href="#23269" class="Bound">ùëÉ</a>
    <a id="RightAction._‚Üì_"></a><a id="23359" href="#23359" class="Field Operator">_‚Üì_</a> <a id="23363" class="Symbol">:</a> <a id="23365" href="#23280" class="Bound">ùëÜ</a> <a id="23367" class="Symbol">‚Üí</a> <a id="23369" href="#23269" class="Bound">ùëÉ</a> <a id="23371" class="Symbol">‚Üí</a> <a id="23373" href="#23280" class="Bound">ùëÜ</a>
    <a id="RightAction.‚Üì-assoc"></a><a id="23379" href="#23379" class="Field">‚Üì-assoc</a> <a id="23387" class="Symbol">:</a> <a id="23389" class="Symbol">‚àÄ</a> <a id="23391" href="#23391" class="Bound">x</a> <a id="23393" href="#23393" class="Bound">y</a> <a id="23395" href="#23395" class="Bound">z</a> <a id="23397" class="Symbol">‚Üí</a> <a id="23399" class="Symbol">(</a><a id="23400" href="#23391" class="Bound">x</a> <a id="23402" href="#23359" class="Field Operator">‚Üì</a> <a id="23404" href="#23393" class="Bound">y</a><a id="23405" class="Symbol">)</a> <a id="23407" href="#23359" class="Field Operator">‚Üì</a> <a id="23409" href="#23395" class="Bound">z</a> <a id="23411" href="../code/depth-comonads/Agda.Builtin.Cubical.Path.html#381" class="Function Operator">‚â°</a> <a id="23413" href="#23391" class="Bound">x</a> <a id="23415" href="#23359" class="Field Operator">‚Üì</a> <a id="23417" class="Symbol">(</a><a id="23418" href="#23393" class="Bound">y</a> <a id="23420" href="../code/depth-comonads/DepthComonads.Algebra.html#1530" class="Field Operator">‚àô</a> <a id="23422" href="#23395" class="Bound">z</a><a id="23423" class="Symbol">)</a>
    <a id="RightAction.‚Üì-Œµ"></a><a id="23429" href="#23429" class="Field">‚Üì-Œµ</a> <a id="23433" class="Symbol">:</a> <a id="23435" class="Symbol">‚àÄ</a> <a id="23437" href="#23437" class="Bound">x</a> <a id="23439" class="Symbol">‚Üí</a> <a id="23441" href="#23437" class="Bound">x</a> <a id="23443" href="#23359" class="Field Operator">‚Üì</a> <a id="23445" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a> <a id="23447" href="../code/depth-comonads/Agda.Builtin.Cubical.Path.html#381" class="Function Operator">‚â°</a> <a id="23449" href="#23437" class="Bound">x</a>
</pre>
<!--
<pre class="Agda"><a id="23465" class="Keyword">open</a> <a id="23470" href="#23256" class="Module">RightAction</a> <a id="23482" class="Symbol">‚¶É</a> <a id="23484" class="Symbol">...</a> <a id="23488" class="Symbol">‚¶Ñ</a>
<a id="23490" class="Keyword">variable</a> <a id="23499" href="#23499" class="Generalizable">ùëÉ</a> <a id="23501" href="#23501" class="Generalizable">ùëÜ</a> <a id="23503" class="Symbol">:</a> <a id="23505" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
</pre>-->

A (right) monoid action is a monoid along with a function `‚Üì` that "acts" on some other set, in a way that coheres with the monoid methods.
The definition is given above.
One way to think about it is that if a monoid `ùëÉ` has an action on `ùëÜ` it means that elements of `ùëÉ` can kind of be transformed into elements of `ùëÜ ‚Üí ùëÜ`.


This can be used to construct a monad that looks suspiciously like the state monad:
<pre class="Agda"><a id="Upd"></a><a id="23934" href="#23934" class="Function">Upd</a> <a id="23938" class="Symbol">:</a> <a id="23940" class="Symbol">(</a><a id="23941" href="#23941" class="Bound">ùëÉ</a> <a id="23943" href="#23943" class="Bound">ùëÜ</a> <a id="23945" class="Symbol">:</a> <a id="23947" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="23951" class="Symbol">)</a> <a id="23953" class="Symbol">‚¶É</a> <a id="23955" href="#23955" class="Bound">_</a> <a id="23957" class="Symbol">:</a> <a id="23959" href="#23256" class="Record">RightAction</a> <a id="23971" href="#23941" class="Bound">ùëÉ</a> <a id="23973" href="#23943" class="Bound">ùëÜ</a> <a id="23975" class="Symbol">‚¶Ñ</a> <a id="23977" class="Symbol">‚Üí</a> <a id="23979" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="23984" class="Symbol">‚Üí</a> <a id="23986" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
<a id="23991" href="#23934" class="Function">Upd</a> <a id="23995" href="#23995" class="Bound">ùëÉ</a> <a id="23997" href="#23997" class="Bound">ùëÜ</a> <a id="23999" href="#23999" class="Bound">X</a> <a id="24001" class="Symbol">=</a> <a id="24003" href="#23997" class="Bound">ùëÜ</a> <a id="24005" class="Symbol">‚Üí</a> <a id="24007" href="#23995" class="Bound">ùëÉ</a> <a id="24009" href="../code/depth-comonads/DepthComonads.Sigma.html#542" class="Function Operator">√ó</a> <a id="24011" href="#23999" class="Bound">X</a>

<a id="Œ∑"></a><a id="24014" href="#24014" class="Function">Œ∑</a> <a id="24016" class="Symbol">:</a> <a id="24018" class="Symbol">‚¶É</a> <a id="24020" href="#24020" class="Bound">_</a> <a id="24022" class="Symbol">:</a> <a id="24024" href="#23256" class="Record">RightAction</a> <a id="24036" href="#23499" class="Generalizable">ùëÉ</a> <a id="24038" href="#23501" class="Generalizable">ùëÜ</a> <a id="24040" class="Symbol">‚¶Ñ</a> <a id="24042" class="Symbol">‚Üí</a> <a id="24044" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="24046" class="Symbol">‚Üí</a> <a id="24048" href="#23934" class="Function">Upd</a> <a id="24052" href="#23499" class="Generalizable">ùëÉ</a> <a id="24054" href="#23501" class="Generalizable">ùëÜ</a> <a id="24056" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
<a id="24058" href="#24014" class="Function">Œ∑</a> <a id="24060" href="#24060" class="Bound">x</a> <a id="24062" href="#24062" class="Bound">s</a> <a id="24064" class="Symbol">=</a> <a id="24066" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a> <a id="24068" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="24070" href="#24060" class="Bound">x</a>

<a id="Œº"></a><a id="24073" href="#24073" class="Function">Œº</a> <a id="24075" class="Symbol">:</a> <a id="24077" class="Symbol">‚¶É</a> <a id="24079" href="#24079" class="Bound">_</a> <a id="24081" class="Symbol">:</a> <a id="24083" href="#23256" class="Record">RightAction</a> <a id="24095" href="#23499" class="Generalizable">ùëÉ</a> <a id="24097" href="#23501" class="Generalizable">ùëÜ</a> <a id="24099" class="Symbol">‚¶Ñ</a> <a id="24101" class="Symbol">‚Üí</a> <a id="24103" href="#23934" class="Function">Upd</a> <a id="24107" href="#23499" class="Generalizable">ùëÉ</a> <a id="24109" href="#23501" class="Generalizable">ùëÜ</a> <a id="24111" class="Symbol">(</a><a id="24112" href="#23934" class="Function">Upd</a> <a id="24116" href="#23499" class="Generalizable">ùëÉ</a> <a id="24118" href="#23501" class="Generalizable">ùëÜ</a> <a id="24120" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a><a id="24121" class="Symbol">)</a> <a id="24123" class="Symbol">‚Üí</a> <a id="24125" href="#23934" class="Function">Upd</a> <a id="24129" href="#23499" class="Generalizable">ùëÉ</a> <a id="24131" href="#23501" class="Generalizable">ùëÜ</a> <a id="24133" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
<a id="24135" href="#24073" class="Function">Œº</a> <a id="24137" href="#24137" class="Bound">xs</a> <a id="24140" href="#24140" class="Bound">s</a> <a id="24142" class="Symbol">=</a> <a id="24144" class="Keyword">let</a> <a id="24148" href="#24148" class="Bound">p</a> <a id="24150" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="24152" href="#24152" class="Bound">x</a> <a id="24154" class="Symbol">=</a> <a id="24156" href="#24137" class="Bound">xs</a> <a id="24159" href="#24140" class="Bound">s</a>
             <a id="24174" href="#24174" class="Bound">q</a> <a id="24176" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="24178" href="#24178" class="Bound">y</a> <a id="24180" class="Symbol">=</a> <a id="24182" href="#24152" class="Bound">x</a> <a id="24184" class="Symbol">(</a><a id="24185" href="#24140" class="Bound">s</a> <a id="24187" href="#23359" class="Field Operator">‚Üì</a> <a id="24189" href="#24148" class="Bound">p</a><a id="24190" class="Symbol">)</a>
         <a id="24201" class="Keyword">in</a>  <a id="24205" class="Symbol">(</a><a id="24206" href="#24148" class="Bound">p</a> <a id="24208" href="../code/depth-comonads/DepthComonads.Algebra.html#1530" class="Field Operator">‚àô</a> <a id="24210" href="#24174" class="Bound">q</a> <a id="24212" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="24214" href="#24178" class="Bound">y</a><a id="24215" class="Symbol">)</a>
</pre>
It turns out that the dependently-typed version of this gives directed containers.

# Grading and the Cofree Comonad

I'm still in the early stages of understanding all of this material, but at the moment graded comonads and transformers are concepts that I'm much more familiar and comfortable with.

The idea behind graded monads and comonads is similar to the idea behind any indexed monad: we're adding an extra type parameter to the monad or type, which can constrain the operations involved.
The *graded* monads and comonads use a monoid as that index.
This works particularly nicely, in my opinion: just allowing any index at all sometimes feels a little unstructured.
The grading construction seems to constrain things to the right degree: the use of the monoid, as well, works really well with comonads.

That preamble out of the way, here's the definition of a graded comonad:

<!--
<pre class="Agda"><a id="25119" class="Keyword">variable</a> <a id="25128" href="#25128" class="Generalizable">x</a> <a id="25130" href="#25130" class="Generalizable">y</a> <a id="25132" href="#25132" class="Generalizable">z</a> <a id="25134" class="Symbol">:</a> <a id="25136" href="#23501" class="Generalizable">ùëÜ</a>
<a id="25138" class="Keyword">variable</a> <a id="25147" href="#25147" class="Generalizable">A‚ÇÄ</a> <a id="25150" href="#25150" class="Generalizable">B‚ÇÄ</a> <a id="25153" href="#25153" class="Generalizable">C‚ÇÄ</a> <a id="25156" href="#25156" class="Generalizable">D‚ÇÄ</a> <a id="25159" class="Symbol">:</a> <a id="25161" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
</pre>-->

<pre class="Agda"><a id="25179" class="Keyword">record</a> <a id="GradedComonad"></a><a id="25186" href="#25186" class="Record">GradedComonad</a> <a id="25200" class="Symbol">(</a><a id="25201" href="#25201" class="Bound">ùëÜ</a> <a id="25203" class="Symbol">:</a> <a id="25205" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="25209" class="Symbol">)</a> <a id="25211" class="Symbol">‚¶É</a> <a id="25213" href="#25213" class="Bound">_</a> <a id="25215" class="Symbol">:</a> <a id="25217" href="../code/depth-comonads/DepthComonads.Algebra.html#1492" class="Record">Monoid</a> <a id="25224" href="#25201" class="Bound">ùëÜ</a> <a id="25226" class="Symbol">‚¶Ñ</a> <a id="25228" class="Symbol">(</a><a id="25229" href="#25229" class="Bound">ùê∂</a> <a id="25231" class="Symbol">:</a> <a id="25233" href="#25201" class="Bound">ùëÜ</a> <a id="25235" class="Symbol">‚Üí</a> <a id="25237" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="25242" class="Symbol">‚Üí</a> <a id="25244" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="25248" class="Symbol">)</a> <a id="25250" class="Symbol">:</a> <a id="25252" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type‚ÇÅ</a> <a id="25258" class="Keyword">where</a>
  <a id="25266" class="Keyword">field</a>
    <a id="GradedComonad.extract"></a><a id="25276" href="#25276" class="Field">extract</a> <a id="25284" class="Symbol">:</a> <a id="25286" href="#25229" class="Bound">ùê∂</a> <a id="25288" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a> <a id="25290" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="25292" class="Symbol">‚Üí</a> <a id="25294" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
    <a id="GradedComonad.extend"></a><a id="25300" href="#25300" class="Field">extend</a>  <a id="25308" class="Symbol">:</a> <a id="25310" class="Symbol">(</a><a id="25311" href="#25229" class="Bound">ùê∂</a> <a id="25313" href="#25130" class="Generalizable">y</a> <a id="25315" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="25317" class="Symbol">‚Üí</a> <a id="25319" href="../code/depth-comonads/DepthComonads.Level.html#283" class="Generalizable">B</a><a id="25320" class="Symbol">)</a> <a id="25322" class="Symbol">‚Üí</a> <a id="25324" href="#25229" class="Bound">ùê∂</a> <a id="25326" class="Symbol">(</a><a id="25327" href="#25128" class="Generalizable">x</a> <a id="25329" href="../code/depth-comonads/DepthComonads.Algebra.html#1530" class="Field Operator">‚àô</a> <a id="25331" href="#25130" class="Generalizable">y</a><a id="25332" class="Symbol">)</a> <a id="25334" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="25336" class="Symbol">‚Üí</a> <a id="25338" href="#25229" class="Bound">ùê∂</a> <a id="25340" href="#25128" class="Generalizable">x</a> <a id="25342" href="../code/depth-comonads/DepthComonads.Level.html#283" class="Generalizable">B</a>
</pre>This also has a few laws, which are expressed cleaner using cokleisli composition:
<pre class="Agda">  <a id="GradedComonad._=&lt;=_"></a><a id="25437" href="#25437" class="Function Operator">_=&lt;=_</a> <a id="25443" class="Symbol">:</a> <a id="25445" class="Symbol">(</a><a id="25446" href="#25229" class="Bound">ùê∂</a> <a id="25448" href="#25128" class="Generalizable">x</a> <a id="25450" href="../code/depth-comonads/DepthComonads.Level.html#283" class="Generalizable">B</a> <a id="25452" class="Symbol">‚Üí</a> <a id="25454" href="../code/depth-comonads/DepthComonads.Level.html#297" class="Generalizable">C</a><a id="25455" class="Symbol">)</a> <a id="25457" class="Symbol">‚Üí</a> <a id="25459" class="Symbol">(</a><a id="25460" href="#25229" class="Bound">ùê∂</a> <a id="25462" href="#25130" class="Generalizable">y</a> <a id="25464" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="25466" class="Symbol">‚Üí</a> <a id="25468" href="../code/depth-comonads/DepthComonads.Level.html#283" class="Generalizable">B</a><a id="25469" class="Symbol">)</a> <a id="25471" class="Symbol">‚Üí</a> <a id="25473" href="#25229" class="Bound">ùê∂</a> <a id="25475" class="Symbol">(</a><a id="25476" href="#25128" class="Generalizable">x</a> <a id="25478" href="../code/depth-comonads/DepthComonads.Algebra.html#1530" class="Field Operator">‚àô</a> <a id="25480" href="#25130" class="Generalizable">y</a><a id="25481" class="Symbol">)</a> <a id="25483" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="25485" class="Symbol">‚Üí</a> <a id="25487" href="../code/depth-comonads/DepthComonads.Level.html#297" class="Generalizable">C</a>
  <a id="25491" class="Symbol">(</a><a id="25492" href="#25492" class="Bound">g</a> <a id="25494" href="#25437" class="Function Operator">=&lt;=</a> <a id="25498" href="#25498" class="Bound">f</a><a id="25499" class="Symbol">)</a> <a id="25501" href="#25501" class="Bound">x</a> <a id="25503" class="Symbol">=</a> <a id="25505" href="#25492" class="Bound">g</a> <a id="25507" class="Symbol">(</a><a id="25508" href="#25300" class="Field">extend</a> <a id="25515" href="#25498" class="Bound">f</a> <a id="25517" href="#25501" class="Bound">x</a><a id="25518" class="Symbol">)</a>

  <a id="25523" class="Keyword">field</a>
    <a id="GradedComonad.idÀ°"></a><a id="25533" href="#25533" class="Field">idÀ°</a> <a id="25537" class="Symbol">:</a> <a id="25539" class="Symbol">(</a><a id="25540" href="#25540" class="Bound">f</a> <a id="25542" class="Symbol">:</a> <a id="25544" href="#25229" class="Bound">ùê∂</a> <a id="25546" href="#25128" class="Generalizable">x</a> <a id="25548" href="#25147" class="Generalizable">A‚ÇÄ</a> <a id="25551" class="Symbol">‚Üí</a> <a id="25553" href="#25150" class="Generalizable">B‚ÇÄ</a><a id="25555" class="Symbol">)</a> <a id="25557" class="Symbol">‚Üí</a> <a id="25559" href="../code/depth-comonads/Agda.Builtin.Cubical.Path.html#190" class="Postulate">PathP</a> <a id="25565" class="Symbol">(Œª</a> <a id="25568" href="#25568" class="Bound">i</a> <a id="25570" class="Symbol">‚Üí</a> <a id="25572" href="#25229" class="Bound">ùê∂</a> <a id="25574" class="Symbol">(</a><a id="25575" href="../code/depth-comonads/DepthComonads.Algebra.html#1623" class="Field">Œµ‚àô</a> <a id="25578" href="#25128" class="Generalizable">x</a> <a id="25580" href="#25568" class="Bound">i</a><a id="25581" class="Symbol">)</a> <a id="25583" href="#25147" class="Generalizable">A‚ÇÄ</a> <a id="25586" class="Symbol">‚Üí</a> <a id="25588" href="#25150" class="Generalizable">B‚ÇÄ</a><a id="25590" class="Symbol">)</a> <a id="25592" class="Symbol">(</a><a id="25593" href="#25276" class="Field">extract</a> <a id="25601" href="#25437" class="Function Operator">=&lt;=</a> <a id="25605" href="#25540" class="Bound">f</a><a id="25606" class="Symbol">)</a> <a id="25608" href="#25540" class="Bound">f</a>
    <a id="GradedComonad.id ≥"></a><a id="25614" href="#25614" class="Field">id ≥</a> <a id="25618" class="Symbol">:</a> <a id="25620" class="Symbol">(</a><a id="25621" href="#25621" class="Bound">f</a> <a id="25623" class="Symbol">:</a> <a id="25625" href="#25229" class="Bound">ùê∂</a> <a id="25627" href="#25128" class="Generalizable">x</a> <a id="25629" href="#25147" class="Generalizable">A‚ÇÄ</a> <a id="25632" class="Symbol">‚Üí</a> <a id="25634" href="#25150" class="Generalizable">B‚ÇÄ</a><a id="25636" class="Symbol">)</a> <a id="25638" class="Symbol">‚Üí</a> <a id="25640" href="../code/depth-comonads/Agda.Builtin.Cubical.Path.html#190" class="Postulate">PathP</a> <a id="25646" class="Symbol">(Œª</a> <a id="25649" href="#25649" class="Bound">i</a> <a id="25651" class="Symbol">‚Üí</a> <a id="25653" href="#25229" class="Bound">ùê∂</a> <a id="25655" class="Symbol">(</a><a id="25656" href="../code/depth-comonads/DepthComonads.Algebra.html#1650" class="Field">‚àôŒµ</a> <a id="25659" href="#25128" class="Generalizable">x</a> <a id="25661" href="#25649" class="Bound">i</a><a id="25662" class="Symbol">)</a> <a id="25664" href="#25147" class="Generalizable">A‚ÇÄ</a> <a id="25667" class="Symbol">‚Üí</a> <a id="25669" href="#25150" class="Generalizable">B‚ÇÄ</a><a id="25671" class="Symbol">)</a> <a id="25673" class="Symbol">(</a><a id="25674" href="#25621" class="Bound">f</a> <a id="25676" href="#25437" class="Function Operator">=&lt;=</a> <a id="25680" href="#25276" class="Field">extract</a><a id="25687" class="Symbol">)</a> <a id="25689" href="#25621" class="Bound">f</a>
    <a id="GradedComonad.c-assoc"></a><a id="25695" href="#25695" class="Field">c-assoc</a> <a id="25703" class="Symbol">:</a> <a id="25705" class="Symbol">(</a><a id="25706" href="#25706" class="Bound">f</a> <a id="25708" class="Symbol">:</a> <a id="25710" href="#25229" class="Bound">ùê∂</a> <a id="25712" href="#25128" class="Generalizable">x</a> <a id="25714" href="#25153" class="Generalizable">C‚ÇÄ</a> <a id="25717" class="Symbol">‚Üí</a> <a id="25719" href="#25156" class="Generalizable">D‚ÇÄ</a><a id="25721" class="Symbol">)</a> <a id="25723" class="Symbol">(</a><a id="25724" href="#25724" class="Bound">g</a> <a id="25726" class="Symbol">:</a> <a id="25728" href="#25229" class="Bound">ùê∂</a> <a id="25730" href="#25130" class="Generalizable">y</a> <a id="25732" href="#25150" class="Generalizable">B‚ÇÄ</a> <a id="25735" class="Symbol">‚Üí</a> <a id="25737" href="#25153" class="Generalizable">C‚ÇÄ</a><a id="25739" class="Symbol">)</a> <a id="25741" class="Symbol">(</a><a id="25742" href="#25742" class="Bound">h</a> <a id="25744" class="Symbol">:</a> <a id="25746" href="#25229" class="Bound">ùê∂</a> <a id="25748" href="#25132" class="Generalizable">z</a> <a id="25750" href="#25147" class="Generalizable">A‚ÇÄ</a> <a id="25753" class="Symbol">‚Üí</a> <a id="25755" href="#25150" class="Generalizable">B‚ÇÄ</a><a id="25757" class="Symbol">)</a> <a id="25759" class="Symbol">‚Üí</a>
          <a id="25771" href="../code/depth-comonads/Agda.Builtin.Cubical.Path.html#190" class="Postulate">PathP</a> <a id="25777" class="Symbol">(Œª</a> <a id="25780" href="#25780" class="Bound">i</a> <a id="25782" class="Symbol">‚Üí</a> <a id="25784" href="#25229" class="Bound">ùê∂</a> <a id="25786" class="Symbol">(</a><a id="25787" href="../code/depth-comonads/DepthComonads.Algebra.html#1572" class="Field">assoc</a> <a id="25793" href="#25128" class="Generalizable">x</a> <a id="25795" href="#25130" class="Generalizable">y</a> <a id="25797" href="#25132" class="Generalizable">z</a> <a id="25799" href="#25780" class="Bound">i</a><a id="25800" class="Symbol">)</a> <a id="25802" href="#25147" class="Generalizable">A‚ÇÄ</a> <a id="25805" class="Symbol">‚Üí</a> <a id="25807" href="#25156" class="Generalizable">D‚ÇÄ</a><a id="25809" class="Symbol">)</a> <a id="25811" class="Symbol">((</a><a id="25813" href="#25706" class="Bound">f</a> <a id="25815" href="#25437" class="Function Operator">=&lt;=</a> <a id="25819" href="#25724" class="Bound">g</a><a id="25820" class="Symbol">)</a> <a id="25822" href="#25437" class="Function Operator">=&lt;=</a> <a id="25826" href="#25742" class="Bound">h</a><a id="25827" class="Symbol">)</a> <a id="25829" class="Symbol">(</a><a id="25830" href="#25706" class="Bound">f</a> <a id="25832" href="#25437" class="Function Operator">=&lt;=</a> <a id="25836" class="Symbol">(</a><a id="25837" href="#25724" class="Bound">g</a> <a id="25839" href="#25437" class="Function Operator">=&lt;=</a> <a id="25843" href="#25742" class="Bound">h</a><a id="25844" class="Symbol">))</a>
</pre>
This seems to clearly be related to the stream constructions.
Grading is all about the monoidal information about a comonad: the streams above are a comonad which indexes its entries with a monoid.

There are now two constructions I want to show that suggest a link betweent the stream constructions and graded comonads.
First of these is the *Cofree degrading comonad*:

<pre class="Agda"><a id="26228" class="Keyword">record</a> <a id="G-CofreeF"></a><a id="26235" href="#26235" class="Record">G-CofreeF</a> <a id="26245" class="Symbol">(</a><a id="26246" href="#26246" class="Bound">ùêπ</a> <a id="26248" class="Symbol">:</a> <a id="26250" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="26255" class="Symbol">‚Üí</a> <a id="26257" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="26261" class="Symbol">)</a> <a id="26263" class="Symbol">(</a><a id="26264" href="#26264" class="Bound">ùê∂</a> <a id="26266" class="Symbol">:</a> <a id="26268" href="#23501" class="Generalizable">ùëÜ</a> <a id="26270" class="Symbol">‚Üí</a> <a id="26272" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="26277" class="Symbol">‚Üí</a> <a id="26279" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="26283" class="Symbol">)</a> <a id="26285" class="Symbol">(</a><a id="26286" href="#26286" class="Bound">A</a> <a id="26288" class="Symbol">:</a> <a id="26290" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="26294" class="Symbol">)</a> <a id="26296" class="Symbol">:</a> <a id="26298" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="26303" class="Keyword">where</a>
  <a id="26311" class="Keyword">coinductive</a><a id="26322" class="Symbol">;</a> <a id="26324" class="Keyword">constructor</a> <a id="_‚óÉ_"></a><a id="26336" href="#26336" class="CoinductiveConstructor Operator">_‚óÉ_</a>
  <a id="26342" class="Keyword">field</a> <a id="G-CofreeF.here"></a><a id="26348" href="#26348" class="Field">here</a> <a id="26353" class="Symbol">:</a> <a id="26355" href="#26286" class="Bound">A</a>
        <a id="G-CofreeF.step"></a><a id="26365" href="#26365" class="Field">step</a> <a id="26370" class="Symbol">:</a> <a id="26372" href="#26246" class="Bound">ùêπ</a> <a id="26374" class="Symbol">(</a><a id="26375" href="../code/depth-comonads/DepthComonads.Sigma.html#260" class="Function">‚àÉ</a> <a id="26377" href="#26377" class="Bound">w</a> <a id="26379" href="../code/depth-comonads/DepthComonads.Sigma.html#260" class="Function">√ó</a> <a id="26381" href="#26264" class="Bound">ùê∂</a> <a id="26383" href="#26377" class="Bound">w</a> <a id="26385" class="Symbol">(</a><a id="26386" href="#26235" class="Record">G-CofreeF</a> <a id="26396" href="#26246" class="Bound">ùêπ</a> <a id="26398" href="#26264" class="Bound">ùê∂</a> <a id="26400" href="#26286" class="Bound">A</a><a id="26401" class="Symbol">))</a>
<a id="26404" class="Keyword">open</a> <a id="26409" href="#26235" class="Module">G-CofreeF</a>

<a id="G-Cofree"></a><a id="26420" href="#26420" class="Function">G-Cofree</a> <a id="26429" class="Symbol">:</a> <a id="26431" class="Symbol">‚¶É</a> <a id="26433" href="#26433" class="Bound">_</a> <a id="26435" class="Symbol">:</a> <a id="26437" href="../code/depth-comonads/DepthComonads.Algebra.html#1492" class="Record">Monoid</a> <a id="26444" href="#23501" class="Generalizable">ùëÜ</a> <a id="26446" class="Symbol">‚¶Ñ</a> <a id="26448" class="Symbol">‚Üí</a> <a id="26450" class="Symbol">(</a><a id="26451" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="26456" class="Symbol">‚Üí</a> <a id="26458" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="26462" class="Symbol">)</a> <a id="26464" class="Symbol">‚Üí</a> <a id="26466" class="Symbol">(</a><a id="26467" href="#23501" class="Generalizable">ùëÜ</a> <a id="26469" class="Symbol">‚Üí</a> <a id="26471" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="26476" class="Symbol">‚Üí</a> <a id="26478" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="26482" class="Symbol">)</a> <a id="26484" class="Symbol">‚Üí</a> <a id="26486" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="26491" class="Symbol">‚Üí</a> <a id="26493" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
<a id="26498" href="#26420" class="Function">G-Cofree</a> <a id="26507" href="#26507" class="Bound">ùêπ</a> <a id="26509" href="#26509" class="Bound">ùê∂</a> <a id="26511" href="#26511" class="Bound">A</a> <a id="26513" class="Symbol">=</a> <a id="26515" href="#26509" class="Bound">ùê∂</a> <a id="26517" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a> <a id="26519" class="Symbol">(</a><a id="26520" href="#26235" class="Record">G-CofreeF</a> <a id="26530" href="#26507" class="Bound">ùêπ</a> <a id="26532" href="#26509" class="Bound">ùê∂</a> <a id="26534" href="#26511" class="Bound">A</a><a id="26535" class="Symbol">)</a>
</pre>
This construction is similar to the cofree comonad transformer: it is based on the cofree comonad, but with an extra (graded) comonad wrapped around each level.
For any functor ùêπ and graded comonad ùê∂, `G-Cofree ùêπ ùê∂` is a comonad.
The implementation of `extract` is simple:

<!--
<pre class="Agda"><a id="26825" class="Keyword">open</a> <a id="26830" href="#25186" class="Module">GradedComonad</a> <a id="26844" class="Symbol">‚¶É</a> <a id="26846" class="Symbol">...</a> <a id="26850" class="Symbol">‚¶Ñ</a>

<a id="26853" class="Keyword">variable</a>
  <a id="26864" href="#26864" class="Generalizable">ùê∂</a> <a id="26866" class="Symbol">:</a> <a id="26868" href="#23501" class="Generalizable">ùëÜ</a> <a id="26870" class="Symbol">‚Üí</a> <a id="26872" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="26877" class="Symbol">‚Üí</a> <a id="26879" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
</pre>-->
<pre class="Agda"><a id="extract‚Ä≤"></a><a id="26896" href="#26896" class="Function">extract‚Ä≤</a> <a id="26905" class="Symbol">:</a> <a id="26907" class="Symbol">‚¶É</a> <a id="26909" href="#26909" class="Bound">_</a> <a id="26911" class="Symbol">:</a> <a id="26913" href="../code/depth-comonads/DepthComonads.Algebra.html#1492" class="Record">Monoid</a> <a id="26920" href="#23501" class="Generalizable">ùëÜ</a> <a id="26922" class="Symbol">‚¶Ñ</a> <a id="26924" class="Symbol">‚¶É</a> <a id="26926" href="#26926" class="Bound">_</a> <a id="26928" class="Symbol">:</a> <a id="26930" href="#25186" class="Record">GradedComonad</a> <a id="26944" href="#23501" class="Generalizable">ùëÜ</a> <a id="26946" href="#26864" class="Generalizable">ùê∂</a> <a id="26948" class="Symbol">‚¶Ñ</a> <a id="26950" class="Symbol">‚Üí</a> <a id="26952" href="#26420" class="Function">G-Cofree</a> <a id="26961" href="#1226" class="Generalizable">ùêπ</a> <a id="26963" href="#26864" class="Generalizable">ùê∂</a> <a id="26965" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="26967" class="Symbol">‚Üí</a> <a id="26969" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a>
<a id="26971" href="#26896" class="Function">extract‚Ä≤</a> <a id="26980" class="Symbol">=</a> <a id="26982" href="#26348" class="Field">here</a> <a id="26987" href="../code/depth-comonads/DepthComonads.Function.html#125" class="Function Operator">‚àò</a> <a id="26989" href="#25276" class="Field">extract</a>
</pre>
`extend` is more complex.
First, we need a version of `extend` which takes a proof that the grade is of the right form:

<pre class="Agda"><a id="27127" class="Keyword">module</a> <a id="27134" href="#27134" class="Module">_</a> <a id="27136" class="Symbol">{</a> <a id="27138" href="#27138" class="Bound">ùê∂</a> <a id="27140" class="Symbol">:</a> <a id="27142" href="#23501" class="Generalizable">ùëÜ</a> <a id="27144" class="Symbol">‚Üí</a> <a id="27146" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="27151" class="Symbol">‚Üí</a> <a id="27153" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="27158" class="Symbol">}</a> <a id="27160" class="Keyword">where</a>
  <a id="27168" href="#27168" class="Function Operator">extend[_]</a> <a id="27178" class="Symbol">:</a> <a id="27180" class="Symbol">‚¶É</a> <a id="27182" href="#27182" class="Symbol">_</a> <a id="27184" class="Symbol">:</a> <a id="27186" href="../code/depth-comonads/DepthComonads.Algebra.html#1492" class="Record">Monoid</a> <a id="27193" href="#27142" class="Bound">ùëÜ</a> <a id="27195" class="Symbol">‚¶Ñ</a> <a id="27197" class="Symbol">‚¶É</a> <a id="27199" href="#27199" class="Symbol">_</a> <a id="27201" class="Symbol">:</a> <a id="27203" href="#25186" class="Record">GradedComonad</a> <a id="27217" href="#27142" class="Bound">ùëÜ</a> <a id="27219" href="#27138" class="Bound">ùê∂</a> <a id="27221" class="Symbol">‚¶Ñ</a> <a id="27223" class="Symbol">‚Üí</a>
              <a id="27239" href="#25128" class="Generalizable">x</a> <a id="27241" href="../code/depth-comonads/DepthComonads.Algebra.html#1530" class="Field Operator">‚àô</a> <a id="27243" href="#25130" class="Generalizable">y</a> <a id="27245" href="../code/depth-comonads/Agda.Builtin.Cubical.Path.html#381" class="Function Operator">‚â°</a> <a id="27247" href="#25132" class="Generalizable">z</a> <a id="27249" class="Symbol">‚Üí</a> <a id="27251" class="Symbol">(</a><a id="27252" href="#27138" class="Bound">ùê∂</a> <a id="27254" href="#25130" class="Generalizable">y</a> <a id="27256" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="27258" class="Symbol">‚Üí</a> <a id="27260" href="../code/depth-comonads/DepthComonads.Level.html#283" class="Generalizable">B</a><a id="27261" class="Symbol">)</a> <a id="27263" class="Symbol">‚Üí</a> <a id="27265" href="#27138" class="Bound">ùê∂</a> <a id="27267" href="#25132" class="Generalizable">z</a> <a id="27269" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="27271" class="Symbol">‚Üí</a> <a id="27273" href="#27138" class="Bound">ùê∂</a> <a id="27275" href="#25128" class="Generalizable">x</a> <a id="27277" href="../code/depth-comonads/DepthComonads.Level.html#283" class="Generalizable">B</a>
  <a id="27281" href="#27168" class="Function Operator">extend[</a> <a id="27289" href="#27289" class="Bound">p</a> <a id="27291" href="#27168" class="Function Operator">]</a> <a id="27293" href="#27293" class="Bound">k</a> <a id="27295" class="Symbol">=</a> <a id="27297" href="Cubical.Foundations.Prelude.html#7588" class="Function">subst</a> <a id="27303" class="Symbol">(Œª</a> <a id="27306" href="#27306" class="Bound">z</a> <a id="27308" class="Symbol">‚Üí</a> <a id="27310" href="#27138" class="Bound">ùê∂</a> <a id="27312" href="#27306" class="Bound">z</a> <a id="27314" class="Symbol">_</a> <a id="27316" class="Symbol">‚Üí</a> <a id="27318" class="Symbol">_)</a> <a id="27321" href="#27289" class="Bound">p</a> <a id="27323" class="Symbol">(</a><a id="27324" href="#25300" class="Field">extend</a> <a id="27331" href="#27293" class="Bound">k</a><a id="27332" class="Symbol">)</a>
</pre>
Then we can implement the characteristic function on the free comonad: `traceT`.
On graded comonads it has the following form:

<pre class="Agda"><a id="27471" class="Keyword">module</a> <a id="Trace"></a><a id="27478" href="#27478" class="Module">Trace</a> <a id="27484" class="Symbol">‚¶É</a> <a id="27486" href="#27486" class="Bound">_</a> <a id="27488" class="Symbol">:</a> <a id="27490" href="../code/depth-comonads/DepthComonads.Algebra.html#1492" class="Record">Monoid</a> <a id="27497" href="#23501" class="Generalizable">ùëÜ</a> <a id="27499" class="Symbol">‚¶Ñ</a> <a id="27501" class="Symbol">‚¶É</a> <a id="27503" href="#27503" class="Bound">_</a> <a id="27505" class="Symbol">:</a> <a id="27507" href="#25186" class="Record">GradedComonad</a> <a id="27521" href="#23501" class="Generalizable">ùëÜ</a> <a id="27523" href="#26864" class="Generalizable">ùê∂</a> <a id="27525" class="Symbol">‚¶Ñ</a> <a id="27527" class="Symbol">‚¶É</a> <a id="27529" href="#27529" class="Bound">_</a> <a id="27531" class="Symbol">:</a> <a id="27533" href="../code/depth-comonads/DepthComonads.Algebra.html#4107" class="Record">Functor</a> <a id="27541" href="#1226" class="Generalizable">ùêπ</a> <a id="27543" class="Symbol">‚¶Ñ</a> <a id="27545" class="Keyword">where</a>
  <a id="27553" class="Keyword">module</a> <a id="27560" href="#27560" class="Module">_</a> <a id="27562" class="Symbol">{</a><a id="27563" href="#27563" class="Bound">A</a> <a id="27565" href="#27565" class="Bound">B</a><a id="27566" class="Symbol">}</a> <a id="27568" class="Keyword">where</a>
    <a id="27578" class="Symbol">{-#</a> <a id="27582" class="Keyword">NON_TERMINATING</a> <a id="27598" class="Symbol">#-}</a>
    <a id="27606" href="#27606" class="Function">traceT</a> <a id="27613" class="Symbol">:</a> <a id="27615" class="Symbol">(</a><a id="27616" href="#27523" class="Bound">ùê∂</a> <a id="27618" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a> <a id="27620" href="#27563" class="Bound">A</a> <a id="27622" class="Symbol">‚Üí</a> <a id="27624" href="#27565" class="Bound">B</a><a id="27625" class="Symbol">)</a> <a id="27627" class="Symbol">‚Üí</a> <a id="27629" class="Symbol">(</a><a id="27630" href="#27523" class="Bound">ùê∂</a> <a id="27632" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a> <a id="27634" href="#27563" class="Bound">A</a> <a id="27636" class="Symbol">‚Üí</a> <a id="27638" href="#27541" class="Bound">ùêπ</a> <a id="27640" class="Symbol">(</a><a id="27641" href="../code/depth-comonads/DepthComonads.Sigma.html#260" class="Function">‚àÉ</a> <a id="27643" href="#27643" class="Bound">w</a> <a id="27645" href="../code/depth-comonads/DepthComonads.Sigma.html#260" class="Function">√ó</a> <a id="27647" href="#27523" class="Bound">ùê∂</a> <a id="27649" href="#27643" class="Bound">w</a> <a id="27651" href="#27563" class="Bound">A</a><a id="27652" class="Symbol">))</a> <a id="27655" class="Symbol">‚Üí</a> <a id="27657" href="#27523" class="Bound">ùê∂</a> <a id="27659" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a> <a id="27661" href="#27563" class="Bound">A</a> <a id="27663" class="Symbol">‚Üí</a> <a id="27665" href="#26420" class="Function">G-Cofree</a> <a id="27674" href="#27541" class="Bound">ùêπ</a> <a id="27676" href="#27523" class="Bound">ùê∂</a> <a id="27678" href="#27565" class="Bound">B</a>
    <a id="27684" href="#27606" class="Function">traceT</a> <a id="27691" href="#27691" class="Bound">œï</a> <a id="27693" href="#27693" class="Bound">œÅ</a> <a id="27695" class="Symbol">=</a> <a id="27697" href="#27717" class="Function">œà</a>
      <a id="27705" class="Keyword">where</a>
      <a id="27717" href="#27717" class="Function">œà</a> <a id="27719" class="Symbol">:</a> <a id="27721" href="#27523" class="Bound">ùê∂</a> <a id="27723" href="#25128" class="Generalizable">x</a> <a id="27725" href="#27563" class="Bound">A</a> <a id="27727" class="Symbol">‚Üí</a> <a id="27729" href="#27523" class="Bound">ùê∂</a> <a id="27731" href="#25128" class="Generalizable">x</a> <a id="27733" class="Symbol">(</a><a id="27734" href="#26235" class="Record">G-CofreeF</a> <a id="27744" href="#27541" class="Bound">ùêπ</a> <a id="27746" href="#27523" class="Bound">ùê∂</a> <a id="27748" href="#27565" class="Bound">B</a><a id="27749" class="Symbol">)</a>
      <a id="27757" href="#27717" class="Function">œà</a> <a id="27759" class="Symbol">=</a> <a id="27761" href="#27168" class="Function Operator">extend[</a> <a id="27769" href="../code/depth-comonads/DepthComonads.Algebra.html#1650" class="Field">‚àôŒµ</a> <a id="27772" class="Symbol">_</a> <a id="27774" href="#27168" class="Function Operator">]</a> <a id="27776" class="Symbol">Œª</a> <a id="27778" href="#27778" class="Bound">x</a> <a id="27780" class="Symbol">‚Üí</a> <a id="27782" href="#27691" class="Bound">œï</a> <a id="27784" href="#27778" class="Bound">x</a> <a id="27786" href="#26336" class="CoinductiveConstructor Operator">‚óÉ</a> <a id="27788" href="../code/depth-comonads/DepthComonads.Algebra.html#4153" class="Field">map</a> <a id="27792" class="Symbol">(</a><a id="27793" href="../code/depth-comonads/DepthComonads.Sigma.html#1401" class="Function">map‚ÇÇ</a> <a id="27798" href="#27717" class="Function">œà</a><a id="27799" class="Symbol">)</a> <a id="27801" class="Symbol">(</a><a id="27802" href="#27693" class="Bound">œÅ</a> <a id="27804" href="#27778" class="Bound">x</a><a id="27805" class="Symbol">)</a>
</pre>
This function is basically the unfold for the free degrading comonad.
If `G-Cofree` is a internally-labelled tree, then `œï` above is the labelling function, and `œÅ` is the "next" function, returning the children for some root.

Using this, we can implement `extend`:

<pre class="Agda">  <a id="Trace.extend‚Ä≤"></a><a id="28086" href="#28086" class="Function">extend‚Ä≤</a> <a id="28094" class="Symbol">:</a> <a id="28096" class="Symbol">(</a><a id="28097" href="#26420" class="Function">G-Cofree</a> <a id="28106" href="#27541" class="Bound">ùêπ</a> <a id="28108" href="#27523" class="Bound">ùê∂</a> <a id="28110" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="28112" class="Symbol">‚Üí</a> <a id="28114" href="../code/depth-comonads/DepthComonads.Level.html#283" class="Generalizable">B</a><a id="28115" class="Symbol">)</a> <a id="28117" class="Symbol">‚Üí</a> <a id="28119" href="#26420" class="Function">G-Cofree</a> <a id="28128" href="#27541" class="Bound">ùêπ</a> <a id="28130" href="#27523" class="Bound">ùê∂</a> <a id="28132" href="../code/depth-comonads/DepthComonads.Level.html#269" class="Generalizable">A</a> <a id="28134" class="Symbol">‚Üí</a> <a id="28136" href="#26420" class="Function">G-Cofree</a> <a id="28145" href="#27541" class="Bound">ùêπ</a> <a id="28147" href="#27523" class="Bound">ùê∂</a> <a id="28149" href="../code/depth-comonads/DepthComonads.Level.html#283" class="Generalizable">B</a>
  <a id="28153" href="#28086" class="Function">extend‚Ä≤</a> <a id="28161" href="#28161" class="Bound">f</a> <a id="28163" class="Symbol">=</a> <a id="28165" href="#27606" class="Function">traceT</a> <a id="28172" href="#28161" class="Bound">f</a> <a id="28174" class="Symbol">(</a><a id="28175" href="#26365" class="Field">step</a> <a id="28180" href="../code/depth-comonads/DepthComonads.Function.html#125" class="Function Operator">‚àò</a> <a id="28182" href="#25276" class="Field">extract</a><a id="28189" class="Symbol">)</a>
</pre>
The relation between this and the stream is that the stream can be defined in terms of this: `Stream W = G-Cofree id (GC-Id W)`.

Finally, the last construction I want to introduce is the following:

<pre class="Agda"><a id="28400" class="Keyword">module</a> <a id="28407" href="#28407" class="Module">_</a> <a id="28409" class="Symbol">‚¶É</a> <a id="28411" href="#28411" class="Bound">_</a> <a id="28413" class="Symbol">:</a> <a id="28415" href="#12529" class="Record">Monus</a> <a id="28421" href="#23501" class="Generalizable">ùëÜ</a> <a id="28423" class="Symbol">‚¶Ñ</a> <a id="28425" class="Keyword">where</a>
  <a id="28433" class="Keyword">data</a> <a id="28438" href="#28438" class="Datatype">Prefix-F‚äô</a> <a id="28448" class="Symbol">(</a><a id="28449" href="#28449" class="Bound">ùêπ</a> <a id="28451" class="Symbol">:</a> <a id="28453" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="28458" class="Symbol">‚Üí</a> <a id="28460" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="28464" class="Symbol">)</a> <a id="28466" class="Symbol">(</a><a id="28467" href="#28467" class="Bound">ùê∂</a> <a id="28469" class="Symbol">:</a> <a id="28471" href="#28421" class="Bound">ùëÜ</a> <a id="28473" class="Symbol">‚Üí</a> <a id="28475" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="28480" class="Symbol">‚Üí</a> <a id="28482" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="28486" class="Symbol">)</a> <a id="28488" class="Symbol">(</a><a id="28489" href="#28489" class="Bound">i</a> <a id="28491" href="#28491" class="Bound">j</a> <a id="28493" class="Symbol">:</a> <a id="28495" href="#28421" class="Bound">ùëÜ</a><a id="28496" class="Symbol">)</a> <a id="28498" class="Symbol">(</a><a id="28499" href="#28499" class="Bound">A</a> <a id="28501" class="Symbol">:</a> <a id="28503" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="28507" class="Symbol">)</a> <a id="28509" class="Symbol">:</a> <a id="28511" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="28516" class="Keyword">where</a> 
    <a id="28527" href="#28527" class="InductiveConstructor">prefix</a> <a id="28534" class="Symbol">:</a> <a id="28536" class="Symbol">((</a><a id="28538" href="#28538" class="Bound">i‚â§j</a> <a id="28542" class="Symbol">:</a> <a id="28544" href="#28489" class="Bound">i</a> <a id="28546" href="../code/depth-comonads/DepthComonads.Relation.Binary.html#1444" class="Function Operator">‚â§</a> <a id="28548" href="#28491" class="Bound">j</a><a id="28549" class="Symbol">)</a> <a id="28551" class="Symbol">‚Üí</a> <a id="28553" href="#28499" class="Bound">A</a> <a id="28555" href="../code/depth-comonads/DepthComonads.Sigma.html#542" class="Function Operator">√ó</a> <a id="28557" href="#28449" class="Bound">ùêπ</a> <a id="28559" class="Symbol">(</a><a id="28560" href="../code/depth-comonads/DepthComonads.Sigma.html#260" class="Function">‚àÉ</a> <a id="28562" href="#28562" class="Bound">k</a> <a id="28564" href="../code/depth-comonads/DepthComonads.Sigma.html#260" class="Function">√ó</a> <a id="28566" href="#28467" class="Bound">ùê∂</a> <a id="28568" href="#28562" class="Bound">k</a> <a id="28570" class="Symbol">(</a><a id="28571" href="#28438" class="Datatype">Prefix-F‚äô</a> <a id="28581" href="#28449" class="Bound">ùêπ</a> <a id="28583" href="#28467" class="Bound">ùê∂</a> <a id="28585" href="#28562" class="Bound">k</a> <a id="28587" class="Symbol">(</a><a id="28588" href="../code/depth-comonads/Agda.Builtin.Sigma.html#252" class="Field">fst</a> <a id="28592" href="#28538" class="Bound">i‚â§j</a><a id="28595" class="Symbol">)</a> <a id="28597" href="#28499" class="Bound">A</a><a id="28598" class="Symbol">)))</a> <a id="28602" class="Symbol">‚Üí</a> <a id="28604" href="#28438" class="Datatype">Prefix-F‚äô</a> <a id="28614" href="#28449" class="Bound">ùêπ</a> <a id="28616" href="#28467" class="Bound">ùê∂</a> <a id="28618" href="#28489" class="Bound">i</a> <a id="28620" href="#28491" class="Bound">j</a> <a id="28622" href="#28499" class="Bound">A</a>

  <a id="28627" href="#28627" class="Function">Prefix‚äô</a> <a id="28635" class="Symbol">:</a> <a id="28637" class="Symbol">(</a><a id="28638" href="#28638" class="Bound">ùêπ</a> <a id="28640" class="Symbol">:</a> <a id="28642" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="28647" class="Symbol">‚Üí</a> <a id="28649" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="28653" class="Symbol">)</a> <a id="28655" class="Symbol">(</a><a id="28656" href="#28656" class="Bound">ùê∂</a> <a id="28658" class="Symbol">:</a> <a id="28660" href="#28421" class="Bound">ùëÜ</a> <a id="28662" class="Symbol">‚Üí</a> <a id="28664" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="28669" class="Symbol">‚Üí</a> <a id="28671" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="28675" class="Symbol">)</a> <a id="28677" class="Symbol">(</a><a id="28678" href="#28678" class="Bound">j</a> <a id="28680" class="Symbol">:</a> <a id="28682" href="#28421" class="Bound">ùëÜ</a><a id="28683" class="Symbol">)</a> <a id="28685" class="Symbol">(</a><a id="28686" href="#28686" class="Bound">A</a> <a id="28688" class="Symbol">:</a> <a id="28690" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="28694" class="Symbol">)</a> <a id="28696" class="Symbol">‚Üí</a> <a id="28698" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
  <a id="28705" href="#28627" class="Function">Prefix‚äô</a> <a id="28713" href="#28713" class="Bound">ùêπ</a> <a id="28715" href="#28715" class="Bound">ùê∂</a> <a id="28717" href="#28717" class="Bound">j</a> <a id="28719" href="#28719" class="Bound">A</a> <a id="28721" class="Symbol">=</a> <a id="28723" href="#28715" class="Bound">ùê∂</a> <a id="28725" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a> <a id="28727" class="Symbol">(</a><a id="28728" href="#28438" class="Datatype">Prefix-F‚äô</a> <a id="28738" href="#28713" class="Bound">ùêπ</a> <a id="28740" href="#28715" class="Bound">ùê∂</a> <a id="28742" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a> <a id="28744" href="#28717" class="Bound">j</a> <a id="28746" href="#28719" class="Bound">A</a><a id="28747" class="Symbol">)</a>

  <a id="28752" href="#28752" class="Function">Prefix</a> <a id="28759" class="Symbol">:</a> <a id="28761" class="Symbol">(</a><a id="28762" href="#28762" class="Bound">ùêπ</a> <a id="28764" class="Symbol">:</a> <a id="28766" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="28771" class="Symbol">‚Üí</a> <a id="28773" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="28777" class="Symbol">)</a> <a id="28779" class="Symbol">(</a><a id="28780" href="#28780" class="Bound">ùê∂</a> <a id="28782" class="Symbol">:</a> <a id="28784" href="#28421" class="Bound">ùëÜ</a> <a id="28786" class="Symbol">‚Üí</a> <a id="28788" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a> <a id="28793" class="Symbol">‚Üí</a> <a id="28795" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="28799" class="Symbol">)</a> <a id="28801" class="Symbol">(</a><a id="28802" href="#28802" class="Bound">A</a> <a id="28804" class="Symbol">:</a> <a id="28806" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="28810" class="Symbol">)</a> <a id="28812" class="Symbol">‚Üí</a> <a id="28814" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a>
  <a id="28821" href="#28752" class="Function">Prefix</a> <a id="28828" href="#28828" class="Bound">ùêπ</a> <a id="28830" href="#28830" class="Bound">ùê∂</a> <a id="28832" href="#28832" class="Bound">A</a> <a id="28834" class="Symbol">=</a> <a id="28836" class="Symbol">‚àÄ</a> <a id="28838" class="Symbol">{</a><a id="28839" href="#28839" class="Bound">i</a><a id="28840" class="Symbol">}</a> <a id="28842" class="Symbol">‚Üí</a> <a id="28844" href="#28627" class="Function">Prefix‚äô</a> <a id="28852" href="#28828" class="Bound">ùêπ</a> <a id="28854" href="#28830" class="Bound">ùê∂</a> <a id="28856" href="#28839" class="Bound">i</a> <a id="28858" href="#28832" class="Bound">A</a>
</pre>
This type is designed to mimic sized type definitions.
It has an implicit parameter which can be set, by the user of the type, to some arbitrary depth.
Basically the parameter means "explore to this depth"; by using the `‚àÄ` we say that it is defined up to any arbitrary depth.

When the `‚â∫` relation on the monus is well founded it is possible to implement `traceT`:

<pre class="Agda">  <a id="29239" class="Keyword">module</a> <a id="29246" href="#29246" class="Module">_</a> <a id="29248" class="Symbol">‚¶É</a> <a id="29250" href="#29250" class="Bound">_</a> <a id="29252" class="Symbol">:</a> <a id="29254" href="#25186" class="Record">GradedComonad</a> <a id="29268" href="#28421" class="Bound">ùëÜ</a> <a id="29270" href="#26864" class="Generalizable">ùê∂</a> <a id="29272" class="Symbol">‚¶Ñ</a> <a id="29274" class="Symbol">‚¶É</a> <a id="29276" href="#29276" class="Bound">_</a> <a id="29278" class="Symbol">:</a> <a id="29280" href="../code/depth-comonads/DepthComonads.Algebra.html#4107" class="Record">Functor</a> <a id="29288" href="#1226" class="Generalizable">ùêπ</a> <a id="29290" class="Symbol">‚¶Ñ</a> <a id="29292" class="Symbol">(</a><a id="29293" href="#29293" class="Bound">wf</a> <a id="29296" class="Symbol">:</a> <a id="29298" href="../code/depth-comonads/DepthComonads.WellFounded.html#230" class="Function">WellFounded</a> <a id="29310" href="../code/depth-comonads/DepthComonads.Algebra.Monus.html#2522" class="Function Operator">_‚â∫_</a><a id="29313" class="Symbol">)</a> <a id="29315" class="Symbol">{</a><a id="29316" href="#29316" class="Bound">A</a> <a id="29318" href="#29318" class="Bound">B</a> <a id="29320" class="Symbol">:</a> <a id="29322" href="../code/depth-comonads/Agda.Primitive.html#326" class="Primitive">Type</a><a id="29326" class="Symbol">}</a> <a id="29328" class="Keyword">where</a>
    <a id="29338" href="#29338" class="Function">traceT</a> <a id="29345" class="Symbol">:</a> <a id="29347" class="Symbol">(</a><a id="29348" href="#29270" class="Bound">ùê∂</a> <a id="29350" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a> <a id="29352" href="#29316" class="Bound">A</a> <a id="29354" class="Symbol">‚Üí</a> <a id="29356" href="#29318" class="Bound">B</a><a id="29357" class="Symbol">)</a> <a id="29359" class="Symbol">‚Üí</a> <a id="29361" class="Symbol">(</a><a id="29362" href="#29270" class="Bound">ùê∂</a> <a id="29364" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a> <a id="29366" href="#29316" class="Bound">A</a> <a id="29368" class="Symbol">‚Üí</a> <a id="29370" href="#29288" class="Bound">ùêπ</a> <a id="29372" class="Symbol">(</a><a id="29373" href="../code/depth-comonads/DepthComonads.Sigma.html#260" class="Function">‚àÉ</a> <a id="29375" href="#29375" class="Bound">w</a> <a id="29377" href="../code/depth-comonads/DepthComonads.Sigma.html#260" class="Function">√ó</a> <a id="29379" class="Symbol">(</a><a id="29380" href="#29375" class="Bound">w</a> <a id="29382" href="../code/depth-comonads/DepthComonads.Path.html#561" class="Function Operator">‚â¢</a> <a id="29384" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a><a id="29385" class="Symbol">)</a> <a id="29387" href="../code/depth-comonads/DepthComonads.Sigma.html#542" class="Function Operator">√ó</a> <a id="29389" href="#29270" class="Bound">ùê∂</a> <a id="29391" href="#29375" class="Bound">w</a> <a id="29393" href="#29316" class="Bound">A</a><a id="29394" class="Symbol">))</a> <a id="29397" class="Symbol">‚Üí</a> <a id="29399" href="#29270" class="Bound">ùê∂</a> <a id="29401" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a> <a id="29403" href="#29316" class="Bound">A</a> <a id="29405" class="Symbol">‚Üí</a> <a id="29407" href="#28752" class="Function">Prefix</a> <a id="29414" href="#29288" class="Bound">ùêπ</a> <a id="29416" href="#29270" class="Bound">ùê∂</a> <a id="29418" href="#29318" class="Bound">B</a>
    <a id="29424" href="#29338" class="Function">traceT</a> <a id="29431" href="#29431" class="Bound">œï</a> <a id="29433" href="#29433" class="Bound">œÅ</a> <a id="29435" href="#29435" class="Bound">xs</a> <a id="29438" class="Symbol">=</a> <a id="29440" href="#27168" class="Function Operator">extend[</a> <a id="29448" href="../code/depth-comonads/DepthComonads.Algebra.html#1650" class="Field">‚àôŒµ</a> <a id="29451" class="Symbol">_</a> <a id="29453" href="#27168" class="Function Operator">]</a> <a id="29455" class="Symbol">(Œª</a> <a id="29458" href="#29458" class="Bound">xs‚Ä≤</a> <a id="29462" class="Symbol">‚Üí</a> <a id="29464" href="#28527" class="InductiveConstructor">prefix</a> <a id="29471" class="Symbol">Œª</a> <a id="29473" href="#29473" class="Bound">_</a> <a id="29475" class="Symbol">‚Üí</a> <a id="29477" href="#29431" class="Bound">œï</a> <a id="29479" href="#29458" class="Bound">xs‚Ä≤</a> <a id="29483" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a>  <a id="29486" href="../code/depth-comonads/DepthComonads.Algebra.html#4153" class="Field">map</a> <a id="29490" class="Symbol">(</a><a id="29491" href="../code/depth-comonads/DepthComonads.Sigma.html#1401" class="Function">map‚ÇÇ</a> <a id="29496" class="Symbol">(</a><a id="29497" href="#29537" class="Function">œà</a> <a id="29499" class="Symbol">(</a><a id="29500" href="#29293" class="Bound">wf</a> <a id="29503" class="Symbol">_)))</a> <a id="29508" class="Symbol">(</a><a id="29509" href="#29433" class="Bound">œÅ</a> <a id="29511" href="#29435" class="Bound">xs</a><a id="29513" class="Symbol">))</a> <a id="29516" href="#29435" class="Bound">xs</a>
      <a id="29525" class="Keyword">where</a>
      <a id="29537" href="#29537" class="Function">œà</a> <a id="29539" class="Symbol">:</a> <a id="29541" href="../code/depth-comonads/DepthComonads.WellFounded.html#113" class="Datatype">Acc</a> <a id="29545" href="../code/depth-comonads/DepthComonads.Algebra.Monus.html#2522" class="Function Operator">_‚â∫_</a> <a id="29549" href="#25130" class="Generalizable">y</a> <a id="29551" class="Symbol">‚Üí</a> <a id="29553" class="Symbol">(</a><a id="29554" href="#25128" class="Generalizable">x</a> <a id="29556" href="../code/depth-comonads/DepthComonads.Path.html#561" class="Function Operator">‚â¢</a> <a id="29558" href="../code/depth-comonads/DepthComonads.Algebra.html#1555" class="Field">Œµ</a><a id="29559" class="Symbol">)</a> <a id="29561" href="../code/depth-comonads/DepthComonads.Sigma.html#542" class="Function Operator">√ó</a> <a id="29563" href="#29270" class="Bound">ùê∂</a> <a id="29565" href="#25128" class="Generalizable">x</a> <a id="29567" href="#29316" class="Bound">A</a> <a id="29569" class="Symbol">‚Üí</a> <a id="29571" href="#29270" class="Bound">ùê∂</a> <a id="29573" href="#25128" class="Generalizable">x</a> <a id="29575" class="Symbol">(</a><a id="29576" href="#28438" class="Datatype">Prefix-F‚äô</a> <a id="29586" href="#29288" class="Bound">ùêπ</a> <a id="29588" href="#29270" class="Bound">ùê∂</a> <a id="29590" href="#25128" class="Generalizable">x</a> <a id="29592" href="#25130" class="Generalizable">y</a> <a id="29594" href="#29318" class="Bound">B</a><a id="29595" class="Symbol">)</a>
      <a id="29603" href="#29537" class="Function">œà</a> <a id="29605" class="Symbol">(</a><a id="29606" href="../code/depth-comonads/DepthComonads.WellFounded.html#189" class="InductiveConstructor">acc</a> <a id="29610" href="#29610" class="Bound">wf</a><a id="29612" class="Symbol">)</a> <a id="29614" class="Symbol">(</a><a id="29615" href="#29615" class="Bound">x‚â¢Œµ</a> <a id="29619" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="29621" href="#29621" class="Bound">xs</a><a id="29623" class="Symbol">)</a> <a id="29625" class="Symbol">=</a>
        <a id="29635" href="#27168" class="Function Operator">extend[</a> <a id="29643" href="../code/depth-comonads/DepthComonads.Algebra.html#1650" class="Field">‚àôŒµ</a> <a id="29646" class="Symbol">_</a> <a id="29648" href="#27168" class="Function Operator">]</a>
          <a id="29660" class="Symbol">(Œª</a> <a id="29663" href="#29663" class="Bound">x</a> <a id="29665" class="Symbol">‚Üí</a> <a id="29667" href="#28527" class="InductiveConstructor">prefix</a>
            <a id="29686" class="Symbol">Œª</a> <a id="29688" class="Symbol">{</a> <a id="29690" class="Symbol">(</a><a id="29691" href="#29691" class="Bound">k</a> <a id="29693" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="29695" href="#29695" class="Bound">y‚â°x‚àôk</a><a id="29700" class="Symbol">)</a> <a id="29702" class="Symbol">‚Üí</a>
              <a id="29718" href="#29431" class="Bound">œï</a> <a id="29720" href="#29663" class="Bound">x</a> <a id="29722" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="29724" href="../code/depth-comonads/DepthComonads.Algebra.html#4153" class="Field">map</a>
                <a id="29744" class="Symbol">(Œª</a> <a id="29747" class="Symbol">{</a> <a id="29749" class="Symbol">(</a><a id="29750" href="#29750" class="Bound">w</a> <a id="29752" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="29754" href="#29754" class="Bound">w‚â¢Œµ</a> <a id="29758" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="29760" href="#29760" class="Bound">xs</a><a id="29762" class="Symbol">)</a> <a id="29764" class="Symbol">‚Üí</a>
                  <a id="29784" href="#29750" class="Bound">w</a> <a id="29786" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="29788" href="#29537" class="Function">œà</a> <a id="29790" class="Symbol">(</a><a id="29791" href="#29610" class="Bound">wf</a> <a id="29794" href="#29691" class="Bound">k</a> <a id="29796" class="Symbol">(_</a> <a id="29799" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="29801" href="#29695" class="Bound">y‚â°x‚àôk</a> <a id="29807" href="Cubical.Foundations.Id.html#737" class="Function Operator">Õæ</a> <a id="29809" href="../code/depth-comonads/DepthComonads.Algebra.html#2733" class="Function">comm</a> <a id="29814" class="Symbol">_</a> <a id="29816" class="Symbol">_</a> <a id="29818" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="29820" href="#29615" class="Bound">x‚â¢Œµ</a><a id="29823" class="Symbol">))</a> <a id="29826" class="Symbol">(</a><a id="29827" href="#29754" class="Bound">w‚â¢Œµ</a> <a id="29831" href="../code/depth-comonads/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="29833" href="#29760" class="Bound">xs</a><a id="29835" class="Symbol">)})</a> <a id="29839" class="Symbol">(</a><a id="29840" href="#29433" class="Bound">œÅ</a> <a id="29842" href="#29663" class="Bound">x</a><a id="29843" class="Symbol">)})</a>
          <a id="29857" href="#29621" class="Bound">xs</a>
</pre>
# Conclusion

Comonads are much less widely used than monads in Haskell and similar languages.
Part of the reason, I think, is that they're too powerful in a non-linear language.
Monads are often used to model sublanguages where it's possible to introduce "special" variables which interact with the monadic context.

```haskell
pyth = do
  x <- [1..10]
  y <- [1..10]
  z <- [1..10]
  guard (x*x + y*y == z*z)
  return (x,y,z)
```

The `x` variable here semantically spans over the range `[1..10]`.
In the following two examples we see the semantics of state and maybe:

<div class="row">
<div class="column">
```haskell
sum :: [Int] -> Int
sum xs = flip evalState 0 $ do
  put 0
  for_ xs $ \x -> do
    n <- get
    put (n + x)
  m <- get
  return m
```
</div>
<div class="column">
```haskell
data E = Lit Int | E :+: E | E :/: E

eval :: E -> Maybe Int
eval (Lit n) = n
eval (xs :+: ys) = do x <- eval xs
                      y <- eval ys
                      return (x + y)
eval (xs :/: ys) = do x <- eval xs
                      y <- eval ys
                      guard (y /= 0)
                      return (x / y)
```
</div>
</div>

The variables `n` and `m` introduced in the state example are "special" because their values depend on the computations that came before.
In the maybe example the variables introduced could be `Nothing`.

You can't do the same thing with comonads because you're always able to extract the "special" variable with `extract :: m a -> a`.
Instead of having special variable *introduction*, comonads let you have special variable *elimination*.
But, since Haskell isn't linear, you can always just discard a variable so this isn't much use.

Looking at the maybe example, we have a function `eval :: E -> Maybe Int` that introduces an `Int` variable with a "catch": it is wrapped in a `Maybe`.
We want to use the `eval` function as if it were a normal function `E -> Int`, with all of the bookkeeping managed for us: that's what monads and do notation (kind of) allow us to do.

An analagous example with comonads might be having a function `consume :: m V -> String`.
This "handles" a `V` value, but the "catch" is that it needs an `m` context to do so.
If we want to treat the `consume` function as if it were a normal function `V -> String` then comonads [and codo notation @orchard_notation_2013] would be a perfect fit.

The reason that this analagous case doesn't arise very often is that we don't have many handlers that look like `m V -> String` in Haskell.
Why?
Because if we want to "handle" a `V` we can just discard it: as a non-linear language, you do not need to perform any ceremony to discard a variable in Haskell.

Graded comonads, though, seem to be much more useful than normal comonads.
I think it is becuase they basically get rid of the `m a -> a` function, changing it into a much more restricted form.
In this way, they give a kind of small linear language, but just for the monoidal type parameter.

And there are a lot of uses for the graded comonads.
Above we've used them for termination checking.
A recursive function might have the form `a -> b`, where `a` is the thing being recursed on.
If we're using well-founded recursion to show that it's terminating, though, we add an extra parameter, an `Acc _<_` proof, turning this function into `Acc _<_ w √ó a -> b`.
The `Acc _<_` here is the graded comonad, and this recursive function is precisely the "handler". 

Other examples might be provacy or permissions: a function might be able to work on some value, but only if it has particular *permission* regarding that value.
The permission here is the monoid.

There are other examples I'm sure, those are just the couple that I have been thinking about.

# References
